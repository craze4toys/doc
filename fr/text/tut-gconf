= Tutoriel Ruby/GConf2

GConf est un mécanisme de stockage de données.  C'est un des moyens les plus faciles pour enregistrer des données relatives à la configuration d'une application.  Ses fonctionnalités sont aussi bien élégantes qu'amusantes.  Si vous devez rajouter des fonctions de personalisation dans votre application, GConf est fait pour vous!

Vous pouvez également consulter ((<Introduction to the GConf library|URL:http://developer.gnome.org/feature/archive/gconf/gconf.html>)) (en anglais), qui introduit également GConf.

== Première étape
Voici un exemple facile mais complet.

 require 'gconf2'
 client = GConf::Client.new
 
 # Lecture de données
 p client["/apps/hoge/stage"]
 p client["/apps/hoge/name"] 
 
 # Ecriture de données
 client["/apps/hoge/stage"] = 1
 client["/apps/hoge/name"] = ARGV[0]

Sauvegardez cet exemple comme "test.rb" et exécutez-le deux fois.

 $ruby test.rb "hoge"
 $ruby test.rb "fuga"

Lors de la première exécution, il affichera deux valeurs "nil" car aucune donnée n'est encore stockée.

Mais lors de la seconde exécution, il affichera 1 et "hoge".

(('#')) Si vous démarrez une troisième fois le programme, vous obtiendrez 1 et "fuga".

C'est tout!
Il n'y a rien de plus à savoir.  Vous pouvez sérialiser des données, et y accéder (lecture/écriture) à n'importe quel moment!

=== Ou sont les données?
Les données sont gerées par gconfd, qui est un démon instancié pour chaque utilisateur.  Elles sont sauvegardées de façon asynchrone dans $HOME/.gconf/apps/hoge/%gconf.xml.  Dans notre exemple, "/apps/hoge/stage" et "/apps/hoge/name" sont des clefs.  Leurs valeurs peuvent-être des chaînes de caractères, des nombres, ou des valeurs booléennes.
== Notification lors d'un changement
GConf::Client utilise le système de signaux GTK.  A la place d'utiliser les fonctions de rappel personnalisées de GConf, vous pouvez simplement vous connecter sur le signal "value_changed".
Démarrez l'exemple suivant dans un terminal, ensuite redémarrez le tout premier exemple dans une seconde session.

 require 'gconf2'
 require 'gtk2'
 
 client = GConf::Client.new
 client.add_dir("/apps/hoge")
 client.notify_add("/apps/hoge/name") do |client, entry|
   p entry.value
 end
 
 Gtk.main

== Modifications
:2004-03-14 ((<Masao|URL:../hiki.cgi?Masao>))
 Ajout de l'appel à Gtk.init dans le second exemple.

:2003-09-11 ((<lone-star|URL:../hiki.cgi?lone-star>))
 Quelques petites corrections orthographiques.

:2003-09-11 ((<Masao|URL:../hiki.cgi?Masao>))
 Traduction en anglais.

:2003-06-19 ((<Masao|URL:../hiki.cgi?Masao>))
 Première version (Japonais).

Traduction de la page anglaise par Laurent Sansonetti.
