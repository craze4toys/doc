= Selector/Chooser Interface And Widgets
{{link "tut-gtk2-selchoose", "tut-gtk2-selchoose", "tut-gtk", "tut-gtk2-fichoo-dialog"}}

== File Chooser Interface And Widgets

=== File Chooser Introduction 

{{image_right("ChooserButtons01.png")}}

The Gtk::FileChooserButton widget provides an easy method for you to ask users to choose a file or a folder. It implements the interface of the Gtk::FileChooser. Note that  this module represents just an interface, hence we never create any Gtk::FileChooser instances. When the user clicks a Gtk::FileChooserButton, an instance of Gtk::FileChooserDialog is opened that allows the user to browse and select one file or one folder, depending on the type of a button you created.

:FileChooser related classes:

  * Gtk::FileChooser - File chooser interface used by  Gtk::FileChooserWidget and Gtk::FileChooserDialog
  * Gtk::FileChooserButton - A button to launch a file selection dialog
  * Gtk::FileChooserDialog - A file chooser dialogue, suitable for "File/Open" or "File/Save" commands
  * Gtk::FileChooserWidget - File chooser widget that can be embedded in other widgets
  * Gtk::FileFilter - A filter for selecting a file subset
  * Gtk::FileSelection - Prompt the user for a file or directory name (obsolete use Gtk::FileChooserDialog instead)

To give you an idea how some of these fit together let's look at an example you can copy-and-paste into a file on your system and run. The top window contains three widgets: (1) folder button, (2) file button, and (3) originally an empty (nil) label. Pay  attention that the example also uses a Gtk::FileChooserDialog object which is spawned when user clicks on the top "folder" button. Of course in your programs you can create a dialogue object on its own via Gtk::FileChooserDialog.new, however here these dialogues are created for you when either button in the top window is pressed. In this case I want you to pay attention to object "w" in the code spawned only when the "chooser_dir" button is pressed, this is the place where we add the extra widget to the dialog. Note also, that the 3rd object (the label) should reflect users's file selection from the FileChooserDialog spawned when user clicked the "FileChooserDialog" object and actually selected some file. That file is obtained and the label initiated in the "file_changed" callback. Lastly, note that GLib class method is used to initialize both buttons' current folder "chooser_*.current_folder = GLib.home_dir".


{{image_left("ChooseYourFile.png")}}
{{br}}
Here you can see the file dialog window opened after the file button was pressed in the first window above and some folder, file and filter selections were made subsequently. Filter selections are shown in the ListBox currently containing value "Image Files" - the name of filter1 (See: filter1.name = "Image Files").
{{br}}
{{br}}
 #!/usr/bin/env ruby
 require 'gtk2'

 def  folder_changed(c_dir, c_file)
   dir = c_dir.filename
   c_file.current_folder = dir
 end
 def file_changed(c_file, lab)
   file = c_file.filename
   file = "" if file == nil
   lab.text = file
 end
 window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
 window.set_title  "File Chooser Buttons"
 window.border_width = 10
 window.signal_connect('delete_event') { Gtk.main_quit }

 label = Gtk::Label.new
 chooser_dir  = Gtk::FileChooserButton.new(
     "Choose a Folder", Gtk::FileChooser::ACTION_SELECT_FOLDER)
 chooser_file = Gtk::FileChooserButton.new(
     "Choose a File", Gtk::FileChooser::ACTION_OPEN)

 # Let's add an extra widget (a button) to the {{ dialog }}
 extra_button = Gtk::Button.new("Extra button")
 extra_button.signal_connect("clicked") do
   puts "extra button is clicked"
 end
 chooser_dir.signal_connect('selection_changed') do |w|
   # {{ w }} = {{ FileChooserDialog }}
   w.extra_widget = extra_button
   folder_changed(w, chooser_file)
 end
 chooser_file.signal_connect('selection_changed') do |w|
   file_changed(chooser_file, label)
 end
 chooser_dir.current_folder  = GLib.home_dir
 chooser_file.current_folder = GLib.home_dir

 filter1 = Gtk::FileFilter.new
 filter2 = Gtk::FileFilter.new

 filter1.name = "Image Files"
 filter2.name = "All Files"

 filter1.add_pattern('*.png')
 filter1.add_pattern('*.jpg')
 filter1.add_pattern('*.gif')
 filter2.add_pattern('*')

 chooser_file.add_filter(filter1)
 chooser_file.add_filter(filter2)

 vbox = Gtk::VBox.new(true, 5)
 vbox.pack_start_defaults(chooser_dir)
 vbox.pack_start_defaults(chooser_file)
 vbox.pack_start_defaults(label)

 window.add(vbox)
 window.show_all
 Gtk.main


In the above program you can see that two Gtk::FileChooserButton buttons types were created, one is ((*"folder"*)) button and the other is ((*"file"*)) button. The determination of the which type to create is made after inspecting the second argument ((*"action"*)):

--- Gtk::FileChooserButton.new(title, action, backend = nil)

    Creates a new file-selecting button widget. ((* Since 2.6 *))
    * title: the title of the browse dialog.  
    * action: the open mode for the widget. (Gtk::FileChooser::Action) 
    * backend: The name of the specific filesystem backend to use or nil. (e.g.) "gnome-vfs" 
    * Returns: a new Gtk::FileChooserButton widget.

The Gtk::FileChooserButton supports the Gtk::FileChooser::Action s Gtk::FileChooser::ACTION_OPEN and Gtk::FileChooser::ACTION_SELECT_FOLDER. 

 chooser_dir  = Gtk::FileChooserButton.new(
     "Choose a Folder", Gtk::FileChooser::ACTION_SELECT_FOLDER)
 chooser_file = Gtk::FileChooserButton.new(
     "Choose a File", Gtk::FileChooser::ACTION_OPEN)

Once you created the desired file button you can initialize it as needed:

 button = Gtk::FileChooserButton.new(
     "Select a file", Gtk::FileChooser::ACTION_SELECT_FOLDER)
 button.current_folder = GLib.home_dir

Note initializing a file button with a folder has no effect, however you can preset the file name for the file button:

 chooser_file = Gtk::FileChooserButton.new(
     "Choose a File", Gtk::FileChooser::ACTION_OPEN)
 chooser_file.current_folder = "/tmp"              # <---- has no effect
 chooser_file.filename = "/home/iwk/wk/a_cfile.c"  # <---- this works


=== Constants
:Action

  Describes whether a Gtk::FileChooser is being used to open existing files or to save to a possibly new file. Since 2.4

  * Gtk::FileChooser::ACTION_OPEN - Indicates open mode. The file chooser will only let the user pick an existing file.
  * Gtk::FileChooser::ACTION_SAVE - Indicates save mode. The file chooser will let the user pick an existing file, or type in a new filename.
  * Gtk::FileChooser::ACTION_SELECT_FOLDER - Indicates an Open mode for selecting folders. The file chooser will let the user pick an existing folder.
  * Gtk::FileChooser::ACTION_CREATE_FOLDER - Indicates a mode for creating a new folder. The file chooser will let the user name an existing or new folder.

:Confirmation

  Used as a return value of handlers for the confirm-overwrite signal. This value determines whether the file chooser will present the stock confirmation dialog, accept the user's choice of a file-name, or let the user choose another file-name. Since 2.8

  * Gtk::FileChooser::CONFIRMATION_CONFIRM - The file chooser will present its stock dialog to confirm about overwriting an existing file.
  * Gtk::FileChooser::CONFIRMATION_ACCEPT_FILENAME - The file chooser will terminate and accept the user's choice of a file name.
  * Gtk::FileChooser::CONFIRMATION_SELECT_AGAIN - The file chooser will continue running, so as to let the user select another file name.
