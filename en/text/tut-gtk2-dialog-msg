= Dialogue Widgets
{{link "tut-gtk2-dialog-custom", "tut-gtk2-dialog", "tut-gtk", "tut-gtk2-dialog-about"}}

== Message Dialogues

There are many types of dialogues already built into GTK+. Although we will bot cover all of them, you will get a solid grasp of how the concepts required to use any built-in dialogues. In the following articles we will cover:

* Gtk::MessageDialog
* Gtk::AboutDialog
* Gtk::FileChooserDialog
* Gtk::FontSelectionDialog
* Gtk::ColorSelectionDialog

Message dialogues are used to provide one of the five types of informational messages. You create a message dialogue with Gtk::MessageDialog.new. 

--- Gtk::MessageDialog.new(parent, flags, message_type, button_type, message = nil)

    Creates a new message dialogue, which is a simple dialogue with an icon indicating the dialogue type and some text the user may want to see. When the user clicks a button a "response" signal is emitted with response IDs from Gtk::Dialog#ResponseType, which we have also seen in the previous session.
    * parent: parent Gtk::Window, or nil for none.
    * flags: Gtk::Dialog#Flags.
    * message_type: Gtk::MessageDialog#Type. 
    * button_type: Gtk::MessageDialog#ButtonsType.
    * message: message.
    * Returns: a new Gtk::MessageDialog

:Message Types:

  The type of message being displayed in the dialogue.

  * ERROR : - Fatal error message.
  * INFO : - Informational message.
  * QUESTION : - Question requiring a choice. You need to provide multiple buttons for this choice.
  * WARNING : - Nonfatal warning message.
  * OTHER : - Generic type of message, that makes no assumption about the content of the message.

:Button Types:

  Prebuilt sets of buttons for the dialogue. If none of these choices are appropriate, simply use Gtk::MessageDialog::BUTTONS_NONE then call Gtk::Dialog#add_buttons method.

  * BUTTONS_CANCEL : - the Cancel button.
  * BUTTONS_CLOSE : - the Close button.
  * BUTTONS_NONE : - no buttons at all.
  * BUTTONS_OK : - the OK button.
  * BUTTONS_OK_CANCEL : - add two buttons OK and Cancel.
  * BUTTONS_YES_NO : - Yes and No buttons.



The above message type of dialogue (ERROR, INFO, QUESTION, WARNING, OTHER) is used to to decide which icon to display, ideally what dialogue title to display and which buttons to add. The last option (OTHER), makes no assumptions about the meaning of the message and displays no icon. In most cases you will not want to use this option, since the other four provided types most likely satisfy all your needs. It is very easy to to build the widget with Gtk::MessageDialog functionality on your own from Gtk::Dialog. We did precisely that in our previous session, however Gtk::MessageDialog saves some typing. Since many applications quite often need to use simple dialogues Gtk::MessageDialog simplifies programming for such eventualities, and also provides a uniform look for all the messages across all GTK+. 

The easiest way to do a modal message dialogue is to use Gtk::Dialog#run, though you can also pass in the Gtk::Dialog::MODAL flag, Gtk::Dialog#run automatically makes the dialogue modal and waits for the user to respond to it. Gtk::Dialog#run  {|response| ...} returns when any dialogue button is clicked. Checking response in adjacent block is also efective, even when user kills the window by clicking the "X" button on the window frame. 

 dialog = Gtk::MessageDialog.new(parent, 
                                 Gtk::Dialog::DESTROY_WITH_PARENT,
                                 Gtk::MessageDialog::QUESTION,
                                 Gtk::MessageDialog::BUTTONS_CLOSE,
                                 "Error loading file '%s'" % filename)

 dialog.run  {|r| puts "response=%d" % [r]}
 dialog.destroy

As you can see the image for this dialogue is the same as before, however had we provided a different message type than INFO, say ERROR, QUESTION or WARNING, the icon would be different.

Let's have a look at our simplified message dialogue:


{{image_right("dialog-custom.png")}}
{{br}}

 #!/usr/bin/env ruby
 require 'gtk2'

 # Create a new message dialogue telling the user
 # that button was clicked.
 def button_clicked (parent)
   dialog = Gtk::MessageDialog.new(
       parent,
       Gtk::Dialog::MODAL,
       Gtk::MessageDialog::INFO,
       Gtk::MessageDialog::BUTTONS_OK,
       "The button was clicked!"
   )
   dialog.title = "Information"
   dialog.run {|r| puts "response=%d" % [r]}
   dialog.destroy
 end

 window = Gtk::Window.new
 window.border_width = 10
 window.set_size_request(200, -1)
 window.title = "Dialogs"
 window.signal_connect('delete_event') { false }
 window.signal_connect('destroy') { Gtk.main_quit }

 button = Gtk::Button.new("_Click Me")
 button.signal_connect('clicked') { button_clicked(window) }

 window.add(button)
 window.show_all
 Gtk.main

Compare the listing with the listings in previous session:

:Warning:
  As of this time (Ruby 1.8.6 and Ruby-GNOME2 rel.: 2-0.17.0-rc1) I was not able to add additional buttons to the Gtk::Dialog#action_area. The solution to this problem, indeed, is to be found in the previous session, where we have learnt to design our own custom dialogue messages!

  {{br}}
  None of the following works:

   button_d = Gtk::Button.new("_Click Me")
   button_d.signal_connect('clicked') { puts "Heeeeeeeeee, success" }
   dialog.action_area.add_child(button_d)

   ### You should be able to manually add buttons to the action_area
   ### by calling Gtk::HButtonBox#add_child and Gtk::ButtonBox#Style.
   ### In fact Gtk::HButtonBox#add_child does not seem to be implemented,
   ### and the following two both quietly do nothing:

   # dialog.action_area.pack_start_defaults(button_d)
   ###   or
   # dialog.action_area.add(button_d)

For completeness let's look at a slightly modified version of the above program, so you can appreciate the variety of possibilities and different types of Gtk::MessageDialog widgets:

{{image_right("dialog-msg-01.png")}}
{{br}}

 #!/usr/bin/env ruby
 require 'gtk2'

 # Create a new message dialog telling the user
 # that button was clicked.
 def button_clicked (parent)
   dialog = Gtk::MessageDialog.new(
       parent,
       Gtk::Dialog::MODAL,
       Gtk::MessageDialog::QUESTION,
       Gtk::MessageDialog::BUTTONS_OK_CANCEL,
       "The button was clicked!"
   )
   dialog.secondary_text = "makes the original text bold"

   button_d = Gtk::Button.new("_Click Me")
   button_d.signal_connect('clicked') { puts "Heeeeeee,success" }
  
   # You should be able to manually add buttons to the Gtk::Dialog#action_area
   # by calling Gtk::HButtonBox#add_child and Gtk::ButtonBox#Style,
   # however this does not work in current release
 
   # The following has no effect. 
   dialog.action_area.pack_start_defaults(button_d)
  
   dialog.title = "Information"
   dialog.run {|r| puts "response=%d" % [r]}
   dialog.destroy
 end

 window = Gtk::Window.new
 window.border_width = 10
 window.set_size_request(200, -1)
 window.title = "Dialogs"
 window.signal_connect('delete_event') { false }
 window.signal_connect('destroy') { Gtk.main_quit }

 button = Gtk::Button.new("_Click Me")
 button.signal_connect('clicked') { button_clicked(window) }

 window.add(button)
 window.show_all
 Gtk.main
