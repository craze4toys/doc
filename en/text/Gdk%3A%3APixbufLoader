= class Gdk::PixbufLoader
Gdk::PixbufLoader provides a way for applications to drive the process of loading an image, by letting them send the image data directly to the loader instead of having the loader read the data from a file. Applications can use this functionality instead of Gdk::Pixbuf.new or Gdk::PixbufAnimation.new when they need to parse image data in small chunks. For example, it should be used when reading an image from a (potentially) slow network connection, or when loading an extremely large file. 

To use Gdk::PixbufLoader to load an image, just create a new one, and call Gdk::PixbufLoader#write to send the data to it. When done, Gdk::PixbufLoader#close should be called to end the stream and finalize everything. The loader will emit three important signals throughout the process. The first, "size_prepared", will be called as soon as the image has enough information to determine the size of the image to be used. If you want to scale the image while loading it, you can call Gdk::PixbufLoader#set_size in response to this signal. 

The second signal, "area_prepared", will be called as soon as the pixbuf of the desired has been allocated. You can obtain it by calling Gdk::PixbufLoader#pixbuf. If you want to use it, simply ref it. In addition, no actual information will be passed in yet, so the pixbuf can be safely filled with any temporary graphics (or an initial color) as needed. You can also call Gdk::PixbufLoader#pixbuf later and get the same pixbuf. 

The last signal, "area_updated" gets called every time a region is updated. This way you can update a partially completed image. Note that you do not know anything about the completeness of an image from the area updated. For example, in an interlaced image, you need to make several passes before the image is done loading. 

==== Loading an animation
Loading an animation is almost as easy as loading an image. Once the first "area_prepared" signal has been emitted, you can call Gdk::PixbufLoader#animation to get the Gdk::PixbufAnimation and Gdk::PixbufAnimation#get_iter to get an Gdk::PixbufAnimationIter for displaying it. 

== Object Hierarchy
* Object
  * GLib::Instantiatable
    * GLib::Object
      * Gdk::PixbufLoader

== Class Methods
--- Gdk::PixbufLoader.new(image_type = nil, is_mime_type = false)
    Creates a new pixbuf loader object.
    If type is nil, it returns a newly-created pixbuf loader. 
    If is_mime_type is either false or nil, it creates a new pixbuf loader object that always attempts to parse image data as if it were an image of type image_type, instead of identifying the type automatically. 
    If is_mime_type is true and GTK+ is 2.4.0 or later, it creates a new pixbuf loader object that always attempts to parse image data as if it were an image of mime type mime_type. Useful if you want an error if the image isn't the expected mime type, for loading image formats that can't be reliably identified by looking at the data, or if the user manually forces a specific mime type. 
    Possible exceptions are in the Gdk::PixbufError and GLib::FileError.
    * image_type: name of the image format to be loaded with the image, or mime_type.
    * is_mime_type: true if image_type is a mime_type. ((* Since 2.4 *))
    * Returns: A newly-created pixbuf loader.

--- Gdk::PixbufLoader.open(image_type = nil, is_mime_type = false) {|loader| ... }
    With no associated block, open is a synonym for Gdk::PixbufLoader.new. If the optional code block is given, it will be passed loader as an argument, and the Gdk::PixbufLoader object will automatically be closed when the block terminates.
    Possible exceptions are in the Gdk::PixbufError and GLib::FileError.
    * image_type: name of the image format to be loaded with the image, or mime_type.
    * is_mime_type: true if image_type is a mime_type. ((* Since 2.4 *))
    * Returns: a newly-created pixbuf loader (but closed if block is given).

== Instance Methods
--- format
    Obtains the available information about the format of the currently loading image file. ((* Since 2.2 *))
    * Returns: A Gdk::PixbufFormat or nil.

--- write(buf)
    This will cause a pixbuf loader to parse the next count bytes of an image. It will return TRUE if the data was loaded successfully, and FALSE if an error occurred. In the latter case, the loader will be closed, and will not accept further writes. Possible exceptions are in the Gdk::PixbufError and GLib::FileError.
     * buf: A String of image data.
     * Returns: true if the write was successful, or false if the loader cannot parse the buffer(raises an exception).  

--- last_write(buf)
    Same as write(buf). But this method call Gdk::PixbufLoader#close internally.
     * buf: A String of image data.
     * Returns: true if the write was successful, or false if the loader cannot parse the buffer(raises an exception).  

--- set_size(width, height)
    Causes the image to be scaled while it is loaded. The desired image size can be determined relative to the original size of the image by calling Gdk::PixbufLoader#set_size from a signal handler for the ::size_prepared signal. 
    Attempts to set the desired image size are ignored after the emission of the ::size_prepared signal. ((* Since 2.2 *))
    * width: The desired width of the image being loaded.  
    * height: The desired height of the image being loaded.  
    * Returns: self

--- pixbuf
    Queries the Gdk::Pixbuf that a pixbuf loader is currently creating. In general it only makes sense to call this method after the "area_prepared" signal has been emitted by the loader; this means that enough data has been read to know the size of the image that will be allocated. If the loader has not received enough data via Gdk::PixbufLoader#write, then this method returns nil. The returned pixbuf will be the same in all future calls to the loader. Additionally, if the loader is an animation, it will return the "static image" of the animation (see Gdk::PixbufAnimation#static_image).
    * Returns: The Gdk::Pixbuf that the loader is creating, or nil if not enough data has been read to determine how to create the image buffer.  

--- animation
    Queries the Gdk::PixbufAnimation that a pixbuf loader is currently creating. In general it only makes sense to call this method after the "area_prepared" signal has been emitted by the loader. If the loader doesn't have enough bytes yet (hasn't emitted the "area_prepared" signal) this function will return nil.
    * Returns: The Gdk::PixbufAnimation that the loader is loading, or nil if not enough data has been read to determine the information.  

--- close
    Informs a pixbuf loader that no further writes with Gdk::PixbufLoader#write will occur, so that it can free its internal loading structures. Also, tries to parse any data that hasn't yet been parsed; if the remaining data is partial or corrupt, an exception will be raised. Possible exceptions are in the Gdk::PixbufError and GLib::FileError. If you're just cancelling a load rather than expecting it to be finished, ignoring the thrown exception is reasonable.
    * Returns: true if all image data written so far was successfully passed out via the update_area signal  


== Signals
--- area-prepared: self
    This signal is emitted when the pixbuf loader has allocated the pixbuf in the desired size. After this signal is emitted, applications can call Gdk::PixbufLoader#pixbuf to fetch the partially-loaded pixbuf.
    * self: the Gdk::PixbufLoader

--- area-updated: self, x, y, width, height
    This signal is emitted when a significant area of the image being loaded has been updated. Normally it means that a complete scanline has been read in, but it could be a different area as well. Applications can use this signal to know when to repaint areas of an image that is being loaded.
    * self: the Gdk::PixbufLoader
    * x: X offset of upper-left corner of the updated area.  
    * y: Y offset of upper-left corner of the updated area.  
    * width: Width of updated area.  
    * height: Height of updated area.  

--- closed: self
    This signal is emitted when Gdk::PixbufLoader#close is called. It can be used by different parts of an application to receive notification when an image loader is closed by the code that drives it.
    * self: the Gdk::PixbufLoader

--- size-prepared: self, width, height
    This signal is emitted when the pixbuf loader has been fed the initial amount of data that is required to figure out the size of the image that it will create. Applications can call Gdk::PixbufLoader#set_size in response to this signal to set the desired size to which the image should be scaled.
    * self: the Gdk::PixbufLoader
    * width: the original width of the image  
    * height: the original height of the image 

== See Also
Gdk::Pixbuf.new, Gdk::PixbufAnimation.new


-((<Masao>))
