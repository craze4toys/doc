= class Gdk::EventCrossing

Generated when the pointer enters or leaves a window.

== Object Hierarchy

* Object
  * GLib::Boxed
    * Gdk::Event
      * Gdk::EventAny
        * Gdk::EventCrossing

== Class Methods

--- Gdk::EventCrossing.new(type)

    Creates a new event of the given type. All fields are set to 0. ((* Since 2.2 *))
    * type: Gdk::Event::ENTER_NOTIFY or Gdk::Event::LEAVE_NOTIFY.
    * Returns: a new Gdk::EventCrossing.

== Instance Methods

--- subwindow

    Gets the window that was entered or left. 
    * Returns: the Gdk::Window

--- subwindow=(window)

    Sets the window that was entered or left. 
    * window: a Gdk::Window
    * Returns: window

--- set_subwindow(window)

    Same as Gdk::EventCrossing#subwindow=.
    * window: a Gdk::Window
    * Returns: self

--- time

    Gets the time of the event in milliseconds. 
    * Returns: the time of the event in milliseconds

--- time=(time)

    Sets the time of the event in milliseconds. 
    * time: the time of the event in milliseconds.
    * Returns: time

--- set_time(time)

    Same as Gdk::EventCrossing#time=.
    * time: the time of the event in milliseconds.
    * Returns: self

--- x

    Gets the x coordinate of the pointer relative to the window. 
    * Returns: the x coordinate of the pointer relative to the window.

--- x=(val)

    Sets the x coordinate of the pointer relative to the window. 
    * val: the x coordinate of the pointer relative to the window. 
    * Returns: val

--- set_x(val)

    Same as Gdk::EventCrossing#x=.
    * val: the x coordinate of the pointer relative to the window. 
    * Returns: self

--- y

    Gets the y coordinate of the pointer relative to the window. 
    * Returns: the y coordinate of the pointer relative to the window.

--- y=(val)

    Sets the y coordinate of the pointer relative to the window. 
    * val: the y coordinate of the pointer relative to the window. 
    * Returns: val

--- set_y(val)

    Same as Gdk::EventCrossing#y=.
    * val: the y coordinate of the pointer relative to the window. 
    * Returns: self

--- x_root

    Gets the x coordinate of the pointer relative to the root of the screen. 
    * Returns: the x coordinate of the pointer relative to the root of the screen.

--- x_root=(val)

    Sets the x coordinate of the pointer relative to the root of the screen. 
    * val: the x coordinate of the pointer relative to the root of the screen. 
    * Returns: val

--- set_x_root(val)

    Sets the x coordinate of the pointer relative to the root of the screen. 
    * val: the x coordinate of the pointer relative to the root of the screen. 
    * Returns: self

--- y_root

    Gets the y coordinate of the pointer relative to the root of the screen. 
    * Returns: the y coordinate of the pointer relative to the root of the screen.

--- y_root=(val)

    Sets the y coordinate of the pointer relative to the root of the screen. 
    * val: the y coordinate of the pointer relative to the root of the screen. 
    * Returns: val

--- set_y_root(val)

    Sets the y coordinate of the pointer relative to the root of the screen. 
    * val: the y coordinate of the pointer relative to the root of the screen. 
    * Returns: self

--- mode

    Gets the crossing mode. See ((<GdkEventCrossingMode|Gdk::EventCrossing#GdkEventCrossingMode>)).
    * Returns: the crossing mode.

--- mode=(mode)

    Sets the crossing mode. See ((<GdkEventCrossingMode|Gdk::EventCrossing#GdkEventCrossingMode>)).
    * mode: the crossing mode(((<GdkEventCrossingMode|Gdk::EventCrossing#GdkEventCrossingMode>)))
    * Returns: mode

--- set_mode(mode)

    Same as Gdk::EventCrossing#mode=.
    * mode: the crossing mode(((<GdkEventCrossingMode|Gdk::EventCrossing#GdkEventCrossingMode>)))
    * Returns: self

--- detail

    Gets the kind of crossing that happened. See ((<((<GdkNotifyType|Gdk::EventCrossing#GdkNotifyType>)).
    * Returns: the kind of crossing that happened.

--- detail=(type)

    Sets the kind of crossing that happened. See ((<((<GdkNotifyType|Gdk::EventCrossing#GdkNotifyType>)).
    * type: the kind of crossing that happened(((<((<GdkNotifyType|Gdk::EventCrossing#GdkNotifyType>))).
    * Returns: type

--- set_detail(type)

    Same as Gdk::EventCrossing#detail=.
    * type: the kind of crossing that happened(((<((<GdkNotifyType|Gdk::EventCrossing#GdkNotifyType>)))
    * Returns: self

--- focus?

    Retrieves the value whether window is the focus window or an inferior, or not. 
    * Returns: true or false

--- focus=(focus)

    Sets the value whether window is the focus window or an inferior. 
    * focus: true if window is the focus window or an inferior. Otherwise false.
    * Returns: focus

--- set_focus(focus)

    Same as Gdk::EventCrossing#focus=.
    * focus: true if window is the focus window or an inferior. Otherwise false.
    * Returns: self

--- state

    Gets a bit-mask representing the state of the modifier keys (e.g. Control, Shift and Alt) and the pointer buttons. See ((<GdkModifierType|Gdk::Window#GdkModifierType>)).  
    * Returns: the state of the modifier keys(((<GdkModifierType|Gdk::Window#GdkModifierType>)))

--- state=(state)

    Sets a bit-mask representing the state of the modifier keys (e.g. Control, Shift and Alt) and the pointer buttons. See ((<GdkModifierType|Gdk::Window#GdkModifierType>)).  
    * state: the state of the modifier keys(((<GdkModifierType|Gdk::Window#GdkModifierType>)))
    * Returns: state

--- set_state(state)

    Same as Gdk::EventCrossing#state=.
    * state: the state of the modifier keys(((<GdkModifierType|Gdk::Window#GdkModifierType>)))
    * Returns: self

== Constants

=== GdkEventCrossingMode

Specifies the crossing mode.

--- NORMAL

    crossing because of pointer motion.

--- GRAB

    crossing because a grab is activated.

--- UNGRAB

    crossing because a grab is deactivated.

=== GdkNotifyType

Specifies the kind of crossing.
See the X11 protocol specification of LeaveNotify for full details of crossing event generation.

--- NOTIFY_ANCESTOR

    the window is entered from an ancestor or left towards an ancestor.

--- NOTIFY_VIRTUAL

    the pointer moves between an ancestor and an inferior of the window.

--- NOTIFY_INFERIOR

    the window is entered from an inferior or left towards an inferior.

--- NOTIFY_NONLINEAR

    the window is entered from or left towards a window which is neither an ancestor nor an inferior.

--- NOTIFY_NONLINEAR_VIRTUAL

    the pointer moves between two windows which are not ancestors of each other and the window is part of the ancestor chain between one of these windows and their least common ancestor.

--- NOTIFY_UNKNOWN

    Unknown type.

== See Also

== ChangeLog

- ((<Masao>))
