= class Gtk::UIManager
A Gtk::UIManager constructs a user interface (menus and toolbars) from one or more UI definitions, which reference actions from one or more action groups. 

== Description

=== UI Definitions
The UI definitions are specified in an XML format which can be roughly described by the following DTD. 

 <!ELEMENT ui          (menubar|toolbar|popup|accelerator)* >
 <!ELEMENT menubar     (menuitem|separator|placeholder|menu)* >
 <!ELEMENT menu        (menuitem|separator|placeholder|menu)* >
 <!ELEMENT popup       (menuitem|separator|placeholder|menu)* >
 <!ELEMENT toolbar     (toolitem|separator|placeholder)* >
 <!ELEMENT placeholder (menuitem|toolitem|separator|placeholder|menu)* >
 <!ELEMENT menuitem     EMPTY >
 <!ELEMENT toolitem     EMPTY >
 <!ELEMENT separator    EMPTY >
 <!ELEMENT accelerator  EMPTY >
 <!ATTLIST menubar      name               #IMPLIED 
                        action             #IMPLIED >
 <!ATTLIST toolbar      name               #IMPLIED 
                        action             #IMPLIED >
 <!ATTLIST popup        name               #IMPLIED 
                        action             #IMPLIED >
 <!ATTLIST placeholder  name               #IMPLIED
                        action             #IMPLIED >
 <!ATTLIST separator    name               #IMPLIED
                        action             #IMPLIED >
 <!ATTLIST menu         name               #IMPLIED
                        action             #REQUIRED
                        position (top|bot) #IMPLIED >
 <!ATTLIST menuitem     name               #IMPLIED
                        action             #REQUIRED
                        position (top|bot) #IMPLIED >
 <!ATTLIST toolitem     name               #IMPLIED
                        action             #REQUIRED
                        position (top|bot) #IMPLIED >
 <!ATTLIST accelerator  name               #IMPLIED
                        action             #REQUIRED >

There are some additional restrictions beyond those specified in the DTD, e.g. every toolitem must have a toolbar in its anchestry and every menuitem must have a menubar or popup in its anchestry. Since a GMarkup parser is used to parse the UI description, it must not only be valid XML, but valid GMarkup. 

If a name is not specified, it defaults to the action. If an action is not specified either, the element name is used. The name and action attributes must not contain '/' characters after parsing (since that would mess up path lookup) and must be usable as XML attributes when enclosed in doublequotes, thus they must not '"' characters or references to the &quot; entity. 


=== Example 1. A UI definition

 <ui>
   <menubar>
     <menu name="FileMenu" action="FileMenuAction">
       <menuitem name="New" action="New2Action" />
       <placeholder name="FileMenuAdditions" />
     </menu>
     <menu name="JustifyMenu" action="JustifyMenuAction">
       <menuitem name="Left" action="justify-left"/>
       <menuitem name="Centre" action="justify-center"/>
       <menuitem name="Right" action="justify-right"/>
       <menuitem name="Fill" action="justify-fill"/>
     </menu>
   </menubar>
   <toolbar action="toolbar1">
     <placeholder name="JustifyToolItems">
       <separator/>
       <toolitem name="Left" action="justify-left"/>
       <toolitem name="Centre" action="justify-center"/>
       <toolitem name="Right" action="justify-right"/>
       <toolitem name="Fill" action="justify-fill"/>
       <separator/>
     </placeholder>
   </toolbar>
 </ui>

The constructed widget hierarchy is very similar to the element tree of the XML, with the exception that placeholders are merged into their parents. The correspondence of XML elements to widgets should be almost obvious: 

* menubar a Gtk::MenuBar
* toolbar a Gtk::Toolbar
* popup a toplevel Gtk::Menu
* menu a Gtk::Menu attached to a menuitem
* menuitem a Gtk::MenuItem subclass, the exact type depends on the action
* toolitem a Gtk::ToolItem subclass, the exact type depends on the action
* separator a Gtk::SeparatorMenuItem or Gtk::SeparatorToolItem
* accelerator a keyboard accelerator

The "position" attribute determines where a constructed widget is positioned wrt. to its siblings in the partially constructed tree. If it is "top", the widget is prepended, otherwise it is appended. 


=== UI Merging
The most remarkable feature of Gtk::UIManager is that it can overlay a set of menuitems and toolitems over another one, and demerge them later. 

Merging is done based on the names of the XML elements. Each element is identified by a path which consists of the names of its anchestors, separated by slashes. For example, the menuitem named "Left" in the example above has the path /ui/menubar/JustifyMenu/Left and the toolitem with the same name has path /ui/toolbar1/JustifyToolItems/Left. 


=== Accelerators
Every action has an accelerator path. Accelerators are installed together with menuitem proxies, but they can also be explicitly added with <accelerator> elements in the UI definition. This makes it possible to have accelerators for actions even if they have no visible proxies. 


=== Smart Separators
The separators created by GtkUIManager are "smart", i.e. they do not show up in the UI unless they end up between two visible menu or tool items. Separators which are located at the very beginning or end of the menu or toolbar containing them, or multiple separators next to each other, are hidden. This is a useful feature, since the merging of UI elements from multiple sources can make it hard or impossible to determine in advance whether a separator will end up in such an unfortunate position. 


=== Empty Menus
Submenus pose similar problems to separators inconnection with merging. It is impossible to know in advance whether they will end up empty after merging. GtkUIManager offers two ways to treat empty submenus: 

* make them disappear by hiding the menu item they're attached to 
* add an insensitive "Empty" item 

The behaviour is chosen based on the "is_important" property of the action to which the submenu is associated. 

== Object Hierarchy
* Object
  * GLib::Instantiatable
    * GLib::Object
      * Gtk::UIManager

== Class Methods
--- Gtk::UIManager.new
    Creates a new ui manager object. ((* Since 2.4 *))
    * Returns: a new ui manager object.

== Instance Methods
--- add_tearoffs?
    Gets the value whether tearoff menu items should be added to menus or not. ((* Since 2.4 *))
    * Returns: true if tearoff menu items should be added to menus
--- add_tearoffs=(add_tearoffs)
    Sets the value whether tearoff menu items should be added to menus or not. ((* Since 2.4 *))
    * add_tearoffs: true if tearoff menu items should be added to menus or false
    * Returns: add_tearoffs
--- set_add_tearoffs(add_tearoffs)
    Same as Gtk::UIManager#add_tearoffs=. ((* Since 2.4 *))
    * add_tearoffs: true if tearoff menu items should be added to menus or false
    * Returns: self

--- insert_action_group(action_group, pos)
    Inserts an action group into the list of action groups associated with self. Actions in earlier groups hide actions with the same name in later groups.  ((* Since 2.4 *))
    * action_group: the Gtk::ActionGroup to be inserted  
    * pos: the position at which the group will be inserted.  
    * Returns: self

--- remove_action_group(action_group)
    Removes an action group from the list of action groups associated with self.  ((* Since 2.4 *))
    * action_group: the Gtk::ActionGroup to be removed  
    * Returns: self

--- action_groups
    Returns the Array of action groups associated with self.  ((* Since 2.4 *))
    * Returns: an Array of action groups(Gtk::ActionGroup). 

--- accel_group
    Returns the Gtk::AccelGroup associated with self.  ((* Since 2.4 *))
    * Returns: the Gtk::AccelGroup.  

--- [path]
--- get_widget(path)
    Looks up a widget by following a path. The path consists of the names specified in the XML description of the UI. separated by '/'. Elements which don't have a name or action attribute in the XML (e.g. <popup>) can be addressed by their XML element name (e.g. "popup"). The root element ("/ui") can be omitted in the path. 
    Note that the widget found by following a path that ends in a <menu> element is the menuitem to which the menu is attached, not the menu itself.  ((* Since 2.4 *))
    * path: a path(String)
    * Returns: the widget found by following the path, or raise an ArgumentError if no widget was found.  

--- get_toplevels(types)
    Obtains an Array of all toplevel widgets of the requested types.
    * types: specifies the types of toplevel widgets to include. Allowed types are Gtk::UIManager::MENUBAR, Gtk::UIManager::TOOLBAR and Gtk::UIManager::POPUP.    ((* Since 2.4 *))
    * Returns: a newly-allocated of all toplevel widgets of the requested types.  

--- get_action(path)
    Looks up an action by following a path. See Gtk::UIManager#get_widget for more information about paths.  ((* Since 2.4 *))
    * path: a path  
    * Returns: the Gtk::Action whose proxy widget is found by following the path, or nil if no widget was found.  

--- add_ui(buffer)
    Parses a string containing a UI definition and merges it with the current contents of self. An enclosing <ui> element is required. This raises an RuntimeException if it's failed.  ((* Since 2.4 *))
    * buffer : the String to parse  
    * Returns : The merge id for the merged UI. The merge id can be used to unmerge the UI with Gtk::UIManager#remove_ui. If an error occurred, the return value is 0.  

--- add_ui(filename)
    Parses a file containing a UI definition and merges it with the current contents of self. This raises an RuntimeException if it's failed. ((* Since 2.4 *))
    * filename: the name of the file to parse  
    * Returns: The merge id for the merged UI. The merge id can be used to unmerge the UI with Gtk::UIManager#remove_ui. If an error occurred, the return value is 0.  

--- add_ui(merge_id, path, name, action, type, top)
    Adds a UI element to the current contents of self. 
    If type is Gtk::UIManager::AUTO, Ruby/GTK inserts a menuitem, toolitem or separator if such an element can be inserted at the place determined by path. Otherwise type must indicate an element that can be inserted at the place determined by path. ((* Since 2.4 *))
    * merge_id: the merge id for the merged UI, see Gtk::UIManager#new_merge_id 
    * path: a path  
    * name: the name for the added UI element  
    * action: the name of the action to be proxied, or nil to add a separator  
    * type: the type of UI element to add ((<GtkUIManagerItemType|Gtk::UIManager#GtkUIManagerItemType>))
    * top: if true, the UI element is added before its siblings, if false, it is added after its siblings

--- remove_ui(merge_id)
    Unmerges the part of selfs content identified by merge_id.  ((* Since 2.4 *))
    * merge_id: a merge id as returned by Gtk::UIManager#add_ui
    * Returns: self

--- ui
    Gets the An XML string describing the merged UI.  ((* Since 2.4 *))
    * Returns: An XML string describing the merged UI

--- ensure_update
    Makes sure that all pending updates to the UI have been completed. 
    This may occasionally be necessary, since Gtk::UIManager updates the UI in an idle function. A typical example where this function is useful is to enforce that the menubar and toolbar have been added to the main window before showing it.  ((* Since 2.4 *))
    * Returns: self

  window.add(vbox)
  merge.signal_connect("add_widget") do
    ...
  end
  merge.add_ui("my-menus")
  merge.add_ui("my-toolars")
  merge.ensure_update
  window.show

--- new_merge_id
    Returns an unused merge id, suitable for use with Gtk::UIManager#add_ui.  ((* Since 2.4 *))
    * Returns: an unused merge id.  


== Constants
=== GtkUIManagerItemType
These enumeration values are used by Gtk::UIManager#add_ui to determine what UI element to create. 
--- AUTO
    Pick the type of the UI element according to context.  
--- MENUBAR
    Create a menubar.  
--- MENU
    Create a menu. 
--- TOOLBAR
    Create a toolbar.
--- PLACEHOLDER
    Insert a placeholder.
--- POPUP
    Create a popup menu.
--- MENUITEM
    Create a menuitem.  
--- TOOLITEM
    Create a toolitem. 
--- SEPARATOR
    Create a separator. 
--- ACCELERATOR
    Install an accelerator.  

== Properties
--- add-tearoffs: true or false (Read/Write)
    Whether tearoff menu items should be added to menus

--- ui: String (Read)
    An XML string describing the merged UI

== Signals
--- actions-changed: self
    The "actions-changed" signal is emitted whenever the set of actions changes. ((* Since 2.4 *))
     * self: Gtk::UIManager

--- add-widget: self
    The add_widget signal is emitted for each generated menubar and toolbar. It is not emitted for generated popup menus, which can be obtained by Gtk::UIManager#get_widget. ((* Since 2.4 *))
     * self: Gtk::UIManager

--- connect-proxy: self, action, proxy
    The connect_proxy signal is emitted after connecting a proxy to an action in the group. 
    This is intended for simple customizations for which a custom action class would be too clumsy, e.g. showing tooltips for menuitems in the statusbar. ((* Since 2.4 *))
     * self: Gtk::UIManager
     * action: the Gtk::Action  
     * proxy: the proxy(Gtk::Widget)

--- disconnect-proxy: self, action, proxy
    The disconnect_proxy signal is emitted after disconnecting a proxy from an action in the group. ((* Since 2.4 *))
     * self: Gtk::UIManager
     * action: the Gtk::Action  
     * proxy: the proxy(Gtk::Widget)

--- post-activate: self
    The post_activate signal is emitted just after the action is activated. 
    This is intended for applications to get notification just after any action is activated. ((* Since 2.4 *))
     * self: Gtk::UIManager
     * action: the Gtk::Action  

--- pre-activate: self
    The pre_activate signal is emitted just before the action is activated. 
    This is intended for applications to get notification just before any action is activated. ((* Since 2.4 *))
     * self: Gtk::UIManager
     * action: the Gtk::Action  

== ChangeLog

- ((<Masao>))
