= Numeric/Text Data Entry
{{link "tut-gtk2-numtxt-entry", "tut-gtk2-numtxt", "tut-gtk", "tut-gtk2-numtxt-hvscales"}}

== Spin Buttons

  * ((<Adjutments|tut-gtk2-numtxt-spinbttns#Adjustments>)) (skip forward)

{{br}}
{{image_right("numtxt-spinbttns.png")}}

Gtk::SpinButton widget is a number selection widget that can handle either integers or floating point numbers. It is derived from from Gtk::Entry widget, so it inherits all its functionality and signals. Though initially not really necessary, to understand spin buttons completely one should get also familiar with another class, namely Gtk::Adjustment. For instance in the following example we do not deal directly with Gtk::Adjustment class at all. Let's look at the program and try to understand it. Later we will dive into this parallel class, so you will get an idea how the two are related.

 #!/usr/bin/env ruby

 require 'gtk2'

 window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
 window.set_title  "Spin Buttons"
 window.border_width = 10
 window.signal_connect('delete_event') { Gtk.main_quit }
 window.set_size_request(250, -1)

                            # min, max,  step
 integer = Gtk::SpinButton.new(0.0, 10.0, 1.0)
 float   = Gtk::SpinButton.new(0.0, 1.0,  0.1)

 vbox = Gtk::VBox.new(false, 5)
 vbox.pack_start(integer, false, true, 0)
 vbox.pack_start(float,   false, true, 0)

 window.add(vbox)
 window.show_all
 Gtk.main

If you have tried out the above example you've seen that numbers can can be selected by incrementing or decrementing with the up and down arrows. It is still possible to enter a number with the keyboard, but the value is rounded to the nearest acceptable value when it is out of range.

{{image_right("numtxt-spinbttns-a.png")}}

The following example is the the same as above only this time it is done with the adjustment. I have also changed the "step" increment for floating-point number scale to 0.01. The main difference when using adjustment however is in the behaviour not immediately apparent. First you can specify the initial value for the scale, and second the "Page Up/Down" keys work with a page increment value which makes sense for larger ranges. 

 #!/usr/bin/env ruby
 require 'gtk2'

 window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
 window.set_title  "Spin Buttons"
 window.border_width = 10
 window.signal_connect('delete_event') { Gtk.main_quit }
 window.set_size_request(250, -1)

 # create two adjustments
                             # value min, max, step  pg-incr pg-size
 integer = Gtk::Adjustment.new(5.0, 0.0, 10.0, 1.0,  2.0,    2.0)
 float   = Gtk::Adjustment.new(0.5, 0.0, 1.0,  0.01, 0.5,    0.5)

 spin_int   = Gtk::SpinButton.new(integer, 1.0, 1)
 spin_float = Gtk::SpinButton.new(float,   0.01, 2)

 vbox = Gtk::VBox.new(false, 5)
 vbox.pack_start(spin_int,   false, true, 0)
 vbox.pack_start(spin_float, false, true, 0)

 window.add(vbox)
 window.show_all
 Gtk.main


=== Adjustments

Gtk::Adjustment is one of the few classes in GTK+ that is not a Widget, because it is derived directly from Gtk::Object. It is used in several widgets such as view ports, widgets derived from Gtk::Range, scales, as well as in spin buttons.

New adjustments are initialized with six parameters:

* initial value
* lower range
* upper range
* step increment
* page increment
* page size

There are also two signals provided by this class:

* changed  - emitted when one or more properties except the value property have changed.
* value-changed - emitted only when value property is altered.


=== Following is a more elaborate example from the original Japanese tutorial page:

{{br}}
{{image_right("numtxt-spinbttns-jp-070-55.png")}}
{{br}}

 #!/usr/bin/env ruby
 require 'gtk2'

 def get_value(spin, label, type)
 	label.set_text(
 		case type
 		when :Int
 			"%d" % spin.value
 		when :Float
 			"%0.*f" % [spin.digits, spin.value]
 		else
 			"0"
 		end
 	)
 end

 window = Gtk::Window.new
 window.signal_connect("destroy") {Gtk.main_quit}
 window.title = "Spin Button"

 main_vbox = Gtk::VBox.new(false, 5)
 main_vbox.border_width = 10
 window.add(main_vbox)

 frame = Gtk::Frame.new("Not accelerated")
 main_vbox.pack_start(frame, true, true, 0)

 vbox = Gtk::VBox.new(false, 0)
 vbox.border_width = 5
 frame.add(vbox)

 hbox = Gtk::HBox.new(false, 0)
 vbox.pack_start(hbox, true, true, 5)

 vbox2 = Gtk::VBox.new(false, 0)
 hbox.pack_start(vbox2, true, true, 5)

 label = Gtk::Label.new("Day :")
 label.set_alignment(0, 0.5)
 vbox2.pack_start(label, false, true, 0)

 adj = Gtk::Adjustment.new(1.0, 1.0, 31.0, 1.0, 5.0, 0.0)

 spinner = Gtk::SpinButton.new(adj, 0, 0)
 spinner.wrap = true
 #spinner.shadow_type = Gtk::SHADOW_OUT
 vbox2.pack_start(spinner, false, true, 0)

 vbox2 = Gtk::VBox.new(false, 0)
 hbox.pack_start(vbox2, true, true, 5)

 label = Gtk::Label.new("Month :")
 label.set_alignment(0, 0.5)
 vbox2.pack_start(label, false, true, 0)

 adj = Gtk::Adjustment.new(1.0, 1.0, 12.0, 1.0, 5.0, 0.0)

 spinner = Gtk::SpinButton.new(adj, 0, 0)
 spinner.wrap = true
 #spinner.shadow_type = Gtk::SHADOW_ETCHED_IN
 vbox2.pack_start(spinner, false, true, 0)

 vbox2 = Gtk::VBox.new(false, 0)
 hbox.pack_start(vbox2, true, true, 5)

 label = Gtk::Label.new("Year :")
 label.set_alignment(0, 0.5)
 vbox2.pack_start(label, false, true, 0)

 adj = Gtk::Adjustment.new(1998.0, 0.0, 2100.0, 1.0, 100.0, 0.0)

 spinner = Gtk::SpinButton.new(adj, 0, 0)
 spinner.wrap = true
 #spinner.shadow_type = Gtk::SHADOW_IN
 spinner.set_size_request(55, -1)
 vbox2.pack_start(spinner, false, true, 0)

 frame = Gtk::Frame.new("Accelerated")
 main_vbox.pack_start(frame, true, true, 0)

 vbox = Gtk::VBox.new(false, 0)
 vbox.border_width = 5
 frame.add(vbox)

 hbox = Gtk::HBox.new(false, 0)
 vbox.pack_start(hbox, false, true, 5)

 vbox2 = Gtk::VBox.new(false, 0)
 hbox.pack_start(vbox2, true, true, 5)

 label = Gtk::Label.new("Value :")
 label.set_alignment(0, 0.5)
 vbox2.pack_start(label, false, true, 0)

 adj = Gtk::Adjustment.new(0.0, -10000.0, 10000.0, 0.5, 100.0, 0.0)

 spinner1 = Gtk::SpinButton.new(adj, 1.0, 2)
 spinner.wrap = true
 spinner.set_size_request(100, -1)
 vbox2.pack_start(spinner1, false, true, 0)

 vbox2 = Gtk::VBox.new(false, 0)
 hbox.pack_start(vbox2, true, true, 5)

 label = Gtk::Label.new("Digits :")
 label.set_alignment(0, 0.5)
 vbox2.pack_start(label, false, true, 0)

 adj = Gtk::Adjustment.new(2, 1, 5, 1, 1, 0)
 spinner2 = Gtk::SpinButton.new(adj, 0.0, 0)
 spinner2.wrap = true
 spinner2.signal_connect("value_changed") do |w|
 	spinner1.digits = w.value
 end
 vbox2.pack_start(spinner2, false, true, 0)

 hbox = Gtk::HBox.new(false, 0)
 vbox.pack_start(hbox, false, true, 5)

 button = Gtk::CheckButton.new("Snap to 0.5-ticks")
 button.signal_connect("clicked") do |w|
 	spinner1.snap_to_ticks = w.active?
 end
 vbox.pack_start(button, true, true, 0)
 button.active = true

 button = Gtk::CheckButton.new("Numeric only input mode")
 button.signal_connect("clicked") do |w|
 	spinner1.numeric = w.active?
 end
 vbox.pack_start(button, true, true, 0)
 button.active = true

 val_label = Gtk::Label.new 

 hbox = Gtk::HBox.new(false, 0)
 vbox.pack_start(hbox, false, true, 5)
 button = Gtk::Button.new("Value as Int")
 button.signal_connect("clicked") do
 	get_value(spinner1, val_label, :Int)
 end
 hbox.pack_start(button, true, true, 5)
 
 button = Gtk::Button.new("Value as Float")
 button.signal_connect("clicked") do
 	get_value(spinner1, val_label, :Float)
 end
 hbox.pack_start(button, true, true, 5)

 vbox.pack_start(val_label, true, true, 0)
 val_label.set_text("0")

 hbox = Gtk::HBox.new(false, 0)
 main_vbox.pack_start(hbox, false, true, 0)

 button = Gtk::Button.new("Close")
 button.signal_connect("clicked") {window.destroy}
 hbox.pack_start(button, true, true, 5)

 window.show_all
 Gtk.main
