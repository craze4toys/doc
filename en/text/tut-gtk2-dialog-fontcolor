= Dialogue Widgets
{{link "tut-gtk2-dialog-fichoo", "tut-gtk2-dialog", "tut-gtk", "tut-gtk2-dialog-assistant"}}

== Collecting Information With Font And Colour Selection Dialogues

=== Colour Selection Dialogues

In the previous chapter you learnt about the Gtk::ColorButton widget, which allowed the user to select a colour. After clicking that button, the user was presented with a dialogue. Although we did not mention it at the time the dialogue was actually a Gtk::ColorSelectionDialog widget.


Just like Gtk::FileChooserDialog, the colour selection dialogue is also a Gtk::Dialog container, with Gtk::ColorSelection widget as its child. Gtk::ColorSelection can just as easily be used on its own, however, since a dialogue is a natural way of presenting the widget, GTK+ provides Gtk::ColorSelectionDialog. On the following image you can see a colour selection dialogue.

Our example program here contains a top-level window with two buttons. When the first button is clicked, a modal Gtk::ColorSelectionDialog is created. the other button will create a nonmodal colour selection dialogue. This example also loops through through program arguments, setting the initial colour value if provided, demonstrating that you can set in an initial colour value when launching an application.


{{image_left("dialog-fontcolor-01.png")}}
{{br}}

 #!/usr/bin/env ruby
 require 'gtk2'
 $global_alpha = 65535
 $global_color = Gdk::Color.parse("#33EEFF")

 def dialog_response (dialogue, result)
   case result
     when 
       Gtk::Dialog::RESPONSE_HELP
       puts "Read the GTK+ API documentation"
     when  Gtk::Dialog::RESPONSE_OK
       colorsel = dialogue.colorsel
       alpha = colorsel.current_alpha
       color = colorsel.current_color
       print "#red=%04X green=%04X blue=%04X alpha=%04X\n" %
              [ color.red, color.green, color.blue, alpha ]            
       $global_color = color
       $global_alpha = alpha      
     else
       dialogue.destroy
   end
 end

 # Create a new color selection dialog and allow the user to
 # choose a color and an opacity value.
 def run_color_selection_dialog(mod_boolean)
   title = mod_boolean ? "Choose Color -- Modal" : "Choose Color -- Non-Modal"
   dialogue = Gtk::ColorSelectionDialog.new(title)
   dialogue.modal = mod_boolean
   colorsel = dialogue.colorsel
   colorsel.has_opacity_control = true
   colorsel.current_color = $global_color
   colorsel.current_alpha = $global_alpha
   dialogue.show_all
   dialogue.signal_connect('response') { |w, response| dialog_response(w, response) }
 end

 window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
 window.set_title  "Color Buttons"
 window.border_width = 10
 window.signal_connect('delete_event') { Gtk.main_quit }
 window.set_size_request(250, -1)

 color = nil
 # Loop through the parameters.  The last colour name or colour
 # string that is specified and successfully parsed, will be
 # used as the initial color of the selection.
 # NOTE: parse blows up if it encounters illegal color, so we
 #       rescue that situation witth "begin ...; rescue; end"
 ARGV.each { |a| begin; color = Gdk::Color.parse(a); rescue; end }
 $global_color = color if color

 modal = Gtk::Button.new("Modal")
 nonmodal = Gtk::Button.new("Non-Modal")
 modal.signal_connect('clicked') { run_color_selection_dialog(true) }
 nonmodal.signal_connect('clicked') { run_color_selection_dialog(false) }
 hbox = Gtk::HBox.new(true, 5)
 hbox.pack_start(modal, false, true, 0)
 hbox.pack_start(nonmodal,   false, true, 0)
 vbox = Gtk::VBox.new(true, 5)
 vbox.pack_start(hbox, false, true, 0)
 window.add(vbox)
 window.show_all
 Gtk.main

The only method directly provided by the Gtk::ColorSelectionDialog here is "new(title)". It returns a new colour selection dialogue object (widget) with its title set. Its important accessor is ((*colorsel*)), which
gets the Gtk::ColorSelection widget contained within the dialogue. You use this widget's methods like Gtk::ColorSelection#current_color, Gtk::ColorSelection#current_alpha, Gtk::ColorSelection#has_opacity_control, ... to manage the dialogue. 

The listing shows a fourth colour property apart from its RGB values, its opacity (alpha value). Ranging from 0 to 65,535, this value regulates how transparent is the colour, where 0 means full transparency and 65,535 is completely opaque (nontransparent). By default the opacity control is turned off for the colour selection widgets. We have turned it on with the Gtk::ColorSelection#has_opacity_control method.

Next important thing to do is to connect the dialogue to the ((*response*)) signal. In the callback block we call the "dialog_response" method with the reference to the signal emitting dialogue widget itself, and the response code (see Gtk::Dialog#ResponseType|Gtk::Dialog#ResponseType).


The following important methods or their siblings are used in the above program:

--- Gdk::Color.parse(spec)

    Parses a textual specification of a color and fill in the red, green, and blue fields of a Gdk::Color structure. The color is not allocated, you must call Gdk::Colormap#alloc_color yourself. The text string can be in any of the forms accepted by XParseColor; these include name for a color from rgb.txt, such as "DarkSlateGray", or a hex specification such as "#305050".
    If spec can't be parsed, the ArgumentError will be occured.
    * spec: the string specifying the color. 
    * Returns: the Gdk::Color



--- colorsel

    Gtk::ColorSelectionDialog#colorsel gets the Gtk::ColorSelection widget contained within the dialogue. Use this widget and its Gtk::ColorSelection#current_color method to gain access to the selected colour. Connect a handler for this widget's color_changed signal to be notified when the colour changes.
    * Returns: the colour selection widget(Gtk::ColorSelection)

--- has_opacity_control=(has_opacity)

    Gtk::ColorSelection#has_opacity_control= sets the colorsel to use or not use opacity.
    * has_opacity: true if colorsel can set the opacity, false otherwise. 
    * Returns: has_opacity


--- current_alpha=(alpha)

    Gtk::ColorSelection#current_alpha=  sets the current opacity to be alpha. The first time this is called, it will also set the original opacity to be alpha too.
    * alpha: an integer between 0 and 65535. 
    * Returns: alpha

--- current_color

    Gtk::ColorSelection#current_color   gets the current color in the Gtk::ColorSelection widget.
    * Returns: a Gdk::Color (the current color).

--- current_color=(color)

    Gtk::ColorSelection#current_color=  sets the current color to be color. The first time this is called, it will also set the original color to be color too.
    * color: A Gdk::Color to set the current color with.
    * Returns: color


== Font Selection Dialogues

The font selection dialogue allows a user to select a font and its characteristics. Direct access to the action area buttons is provided through the Gtk::FontSelectionDialog structure. An example can be seen on the following image, which should look similar to the one you saw in the previous paragraph in the session discussing ((<Font Button|tut-gtk2-fichoo-fontbtt>)).

{{image_left("dialog-fontcolor-02.png")}}
{{br}}

Note that in our example here we use Gtk::FontSelectionDialog as a top-level widget. Obviously it is possible to use dialogues as top-level widgets, but you should not get into the habit of doing this, because it is a poor programming practise.

 #!/usr/bin/env ruby
 require 'gtk2'
 # If the user presses "Apply", display the font, but do not destroy 
 # the dialogue. If "OK" is pressed, display the font and destroy the 
 # dialogue. Otherwise, just destroy  the dialogue.
 def font_dialog_response (dialog, response)
   case response
     when 
       Gtk::Dialog::RESPONSE_APPLY, Gtk::Dialog::RESPONSE_OK
       font = dialog.font_name
       message = Gtk::MessageDialog.new(
         nil,
         Gtk::Dialog::MODAL,
         Gtk::MessageDialog::INFO,
         Gtk::MessageDialog::BUTTONS_OK,
         font
       )
       message.title = "Selected Font"
       message.run
       message.destroy
       dialog.destroy if response == Gtk::Dialog::RESPONSE_OK
     else
       dialog.destroy
   end
 end
 # Use the font selection dialog as the toplevel widget.
 dialogue = Gtk::FontSelectionDialog.new("Choose a Font")
 dialogue.font_name = "Sans Bold Italic 12"
 dialogue.preview_text = "Foundations of Ruby GTK+ Development"
 dialogue.signal_connect('destroy') { Gtk.main_quit }
 dialogue.signal_connect('response') { |w, r| font_dialog_response(w, r) }
 dialogue.show_all
 Gtk.main

* The dialogue itself contains three buttons the Gtk::Stock::OK, Gtk::Stock::APPLY and Gtk::Stock::CANCEL.
* There is no need to create a modal dialogue (note there is no dialog.run), because the selection dialogue is already the top-level widget. Therefore the dialogue is connected to the ((*response*)) signal.
* If the user presses "Apply", the font is presented with the message dialogue when clicking the "OK" button on this message dialogue, only the message is destroyed, but font selection dialogue remains alive. However clicking both times  "OK" both dialogues are killed.
* You can set or retrieve the font string (family, style and size), with  Gtk::FontSelectionDialog#font_name= and Gtk::FontSelectionDialog#font_name methods respectively.
* The font selection widget contains the Gtk::Entry widget where font is immediately changed after any font parameter changes.

It would make sense to display the message in the selected font, however, that is currently not possible with dialogues:

=== Modifying font by programmatic means
:Mmodifying font
    Remember so far in Ruby GTK+ you can currently only change font on editable items or labels, utilizing Gtk::Widget#modify_font. (See also: ((<Font Button|tut-gtk2-fichoo-fontbtt>)).) Here is a snippet of code showing this:

     font = dialog.font_name
     desc = Pango::FontDescription.new(font)
     label.text = "Font: %s" % [desc]
     label.modify_font(desc)
 
