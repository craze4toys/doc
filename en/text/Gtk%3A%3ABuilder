= class Gtk::Builder

((*Since 2.12*))

== Description

A GtkBuilder is an auxiliary object that reads textual
descriptions of a user interface and instantiates the
described objects. To pass a description to a Gtk::Builder,
call Gtk::Builder#add and Gtk::Builder#<<. If they fail to
detect a description type, use Gtk::Builder#add_from_file or
Gtk::Builder#add_from_string. These methods can be called
multiple times; the builder merges the content of all
descriptions.

A Gtk::Builder holds a reference to all objects that it has
constructed and drops these references when it is
finalized. This finalization can cause the destruction of
non-widget objects or widgets which are not contained in a
toplevel window. For toplevel windows constructed by a
builder, it is the responsibility of the user to call
Gtk::Widget#destroy to get rid of them and all the widgets
they contain.

The functions Gtk::Builder#[], Gtk::Builder#get_object and
Gtk::Builder#objects can be used to access the widgets in
the interface by the names assigned to them inside the UI
description. Toplevel windows returned by these functions
will stay around until the user explicitly destroys them
with Gtk::Widget#destroy. Other widgets will either be part
of a larger hierarchy constructed by the builder (in which
case you should not have to worry about their lifecycle), or
without a parent, in which case they have to be added to
some container to make use of them.

The function Gtk::Builder#connect_signals can be used to
connect handlers to the named signals in the description.

=== Gtk::Builder UI Definitions

Gtk::Builder parses textual descriptions of user interfaces
which are specified in an XML format which can be roughly
described by the DTD below. We refer to these descriptions
as Gtk::Builder UI definitions or just UI definitions if the
context is clear. Do not confuse Gtk::Builder UI Definitions
with Gtk::UIManager UI Definitions, which are more limited
in scope.

  <!ELEMENT interface object* >
  <!ELEMENT object    (property|signal|child|ANY)* >
  <!ELEMENT property  PCDATA >
  <!ELEMENT signal    EMPTY >
  <!ELEMENT child     (object|ANY*) >

  <!ATTLIST interface  domain                     #IMPLIED >
  <!ATTLIST object     id                         #REQUIRED
		       class                      #REQUIRED
		       type-func                  #IMPLIED
		       constructor                #IMPLIED >
  <!ATTLIST property   name                       #REQUIRED
		       translatable               #IMPLIED
		       comments                   #IMPLIED
		       context                    #IMPLIED >
  <!ATTLIST signal     name                       #REQUIRED
		       handler                    #REQUIRED
		       after                      #IMPLIED
		       swapped                    #IMPLIED
		       object                     #IMPLIED
		       last_modification_time #IMPLIED >
  <!ATTLIST child      type                       #IMPLIED
		       internal-child             #IMPLIED >

The toplevel element is <interface>. It optionally takes a
"domain" attribute, which will make the builder look for
translated strings using dgettext() in the domain
specified. This can also be done by calling
Gtk::Builder#translation_domain= on the builder. Objects
are described by <object> elements, which can contain
<property> elements to set properties, <signal> elements
which connect signals to handlers, and <child> elements,
which describe child objects (most often widgets inside a
container, but also e.g. actions in an action group, or
columns in a tree model). A <child> element contains an
<object> element which describes the child object.

Typically, the specific kind of object represented by an
<object> element is specified by the "class" attribute. If
the type has not been loaded yet, GTK+ tries to find the
_get_type() from the class name by applying heuristics. This
works in most cases, but if necessary, it is possible to
specify the name of the _get_type() explictly with the
"type-func" attribute. As a special case, Gtk::Builder
allows to use an object that has been constructed by a
Gtk::UIManager in another part of the UI definition by
specifying the id of the Gtk::UIManager in the "constructor"
attribute and the name of the object in the "id" attribute.

Objects must be given a name with the "id" attribute, which
allows the application to retrieve them from the builder
with Gtk::Builder#[]. An id is also necessary to use the
object as property value in other parts of the UI
definition.

Setting properties of objects is pretty straightforward with
the <property> element: the "name" attribute specifies the
name of the property, and the content of the element
specifies the value. If the "translatable" attribute is set
to a true value, GTK+ uses gettext() (or dgettext() if the
builder has a translation domain set) to find a translation
for the value. This happens before the value is parsed, so
it can be used for properties of any type, but it is
probably most useful for string properties. It is also
possible to specify a context to disambiguate short strings,
and comments which may help the translators.

Gtk::Builder can parse textual representations for the most
common property types: characters, strings, integers,
floating-point numbers, booleans (strings like "TRUE", "t",
"yes", "y", "1" are interpreted as TRUE, strings like
"FALSE, "f", "no", "n", "0" are interpreted as FALSE),
enumerations (can be specified by their name, nick or
integer value), flags (can be specified by their name, nick,
integer value, optionally combined with "|",
e.g. "GTK_VISIBLE|GTK_REALIZED") and colors (in a format
understood by gdk_color_parse()). Objects can be referred to
by their name. Pixbufs can be specified as a filename of an
image file to load. In general, Gtk::Builder allows forward
references to objects â€” an object doesn't have to
constructed before it can be referred to. The exception to
this rule is that an object has to be constructed before it
can be used as the value of a construct-only property.

Signal handlers are set up with the <signal> element. The
"name" attribute specifies the name of the signal, and the
"handler" attribute specifies the method to connect to the
signal. The remaining attributes, "after", "swapped" and
"object", have the same meaning as the corresponding
parameters of the g_signal_connect_object() or
g_signal_connect_data() functions. A
"last_modification_time" attribute is also allowed, but it
does not have a meaning to the builder.

Sometimes it is necessary to refer to widgets which have
implicitly been constructed by GTK+ as part of a composite
widget, to set properties on them or to add further children
(e.g. the vbox of a Gtk::Dialog). This can be achieved by
setting the "internal-child" propery of the <child> element
to a true value. Note that Gtk::Builder still requires an
<object> element for the internal child, even if it has
already been constructed.

A number of widgets have different places where a child can
be added (e.g. tabs vs. page content in notebooks). This can
be reflected in a UI definition by specifying the "type"
attribute on a <child> The possible values for the "type"
attribute are described in the sections describing the
widget-specific portions of UI definitions.

=== Example 51. A Gtk::Builder UI Definition

  <interface>
    <object class="GtkDialog" id="dialog1">
      <child internal-child="vbox">
	<object class="GtkVBox" id="vbox1">
	  <property name="border-width">10</property>
	  <child internal-child="action_area">
	    <object class="GtkHButtonBox" id="hbuttonbox1">
	      <property name="border-width">20</property>
	      <child>
		<object class="GtkButton" id="ok_button">
		  <property name="label">gtk-ok</property>
		  <property name="use-stock">TRUE</property>
		  <signal name="clicked" handler="ok_button_clicked"/>
		</object>
	      </child>
	    </object>
	  </child>
	</object>
      </child>
    </object>
  </interface>


Beyond this general structure, several object classes define
their own XML DTD fragments for filling in the ANY
placeholders in the DTD above. Note that a custom element in
a <child> element gets parsed by the custom tag handler of
the parent object, while a custom element in an <object>
element gets parsed by the custom tag handler of the object.

These XML fragments are explained in the documentation of
the respective objects, see Gtk::Widget, Gtk::Container,
Gtk::Dialog, Gtk::CellLayout, Gtk::ColorSelectionDialog,
Gtk::FontSelectionDialog, Gtk::ComboBoxEntry, Gtk::Expander,
Gtk::Frame, Gtk::ListStore, Gtk::TreeStore, Gtk::Notebook,
Gtk::SizeGroup, Gtk::TreeView, Gtk::UIManager, Gtk::ActionGroup.

== Object Hierarchy

* Object
  * GLib::Instantiatable
    * GLib::Object
      * Gtk::Builder

== Class Methods

--- Gtk::Builder.new

    Creates a new builder object.
     * Returns: a new Gtk::Builder object

== Instance Methods

--- <<(filename)
--- <<(ui_definition)

    Parses a file or string containing a ((<Gtk::Builder UI
    definition|Gtk::Builder#Gtk::Builder UI definition>))
    and merges it with the current contents of self.

    If the argument starts with "<" or includes a new line,
    the argument is processed ass ui_definition otherwise
    filename.

     * filename: the name of the file to parse
     * ui_definistion: the string to parse
     * Returns: self

--- add(filename)
--- add(ui_definition)

    Same as <<.

     * filename: the name of the file to parse
     * ui_definistion: the string to parse
     * Returns: self

--- add_from_file(filename)

    Parses a file containing a ((<Gtk::Builder UI
    definition|Gtk::Builder#Gtk::Builder UI definition>))
    and merges it with the current contents of self.

     * filename: the name of the file to parse
     * Returns: self

--- add_from_string(ui_definistion)

    Parses a string containing a ((<Gtk::Builder UI
    definition|Gtk::Builder#Gtk::Builder UI definition>))
    and merges it with the current contents of self.

     * ui_definistion: the string to parse
     * Returns: self

--- [name]
--- get_object(name)

    Gets the object named name. Note that this function does
    not increment the reference count of the returned
    object.

     * name: name of object to get
     * Returns: the object named name or nil if it could not
       be found in the object tree.

--- objects

    Gets all objects that have been constructed by self.

     * Returns: an array containing all the objects
       constructed by the Gtk::Builder instance.

--- connect_signals {|handler_name| ...}

    Is an callback method. The given block should returns a
    callbale object (e.g. Proc object) corresponding
    handler_name.

     * handler_name: name of handler to be connected

--- get_type(type_name)

    Looks up a type by name, using the virtual function that
    Gtk::Builder has for that purpose. This is mainly used
    when implementing the Gtk::Buildable interface on a type.

     * type_name: type name to lookup
     * Returns: the class found for type_name or nil if no
       type was found

--- set_translation_domain(translation_domain)

    Same as translation_domain=.
     * translation_domain: The translation domain used by gettext
     * Returns: self

--- translation_domain

    Gets the translation domain used by gettext.
     * Returns: The translation domain used by gettext

--- translation_domain=(translation_domain)

    Sets the translation domain used by gettext.
     * translation_domain: The translation domain used by gettext
     * Returns: translation_domain

== Properties

--- translation-domain: String (Read/Write)

    The translation domain used by gettext

== See Also

  * Gtk::Buildable

== ChangeLog

  * 2008-04-10 ((<kou>)): created.
