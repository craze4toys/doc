= Dialogue Widgets
{{link "tut-gtk2-dialog-about", "tut-gtk2-dialog", "tut-gtk", "tut-gtk2-dialog-fontcolor"}}

== File Chooser Dialogues

We have already seen Gtk::FileChooser intrface and Gtk::FileChooserButton widget. GTK+ provides the following three widgets that implement Gtk::FileChooser interface:

* Gtk::FileChooserButton: covered earlier (see: ((<File Chooser Interface And Widgets|tut-gtk2-filechooser>))
* Gtk::FileChooserDialog: This widget is simply a dialogue that uses Gtk::FileChooserWidget as a child. Since it implements the Gtk::FileChooser interface, you do not ever have to directly access its child widget.
* Gtk::FileChooserWidget: This actually is a widget that allows a user to choose a file or folder. It can also facilitate the creation of a folder or saving a file.

We have also already learnt about the Gtk::FileChooserButtonand have used a file chooser to open one file and/or select a folder. There are three other features provided by the file chooser widget. In the next three examples, we will learn how to:
* save a file,
* create a directory (folder)
* choose multiple files

=== Saving Files

In the following figure yo can see a Gtk::FileChooserDialog widget that is used to save a file. You will notice that it is similar to the to the other figures in this article, since all file chooser dialogues implement a consistent user interface or look-and-feel to facilitate intuitive use with the emphasis on the commonalities in similar tasks. Similarly the widgets also help the programmer, as they use the same code to implement each dialogue type to minimize the amount of coding required.


{{image_left("dialog-fichoo-01.png")}}
{{br}}



--- Gtk::FileChooserDialog.new(title = nil, parent = nil, action = nil, backend = nil, [button_face1, response_id1], [button_face2, response_id2], ...)

    Creates a new Gtk::FileChooserDialog. ((* Since 2.4 *))
    * title: Title of the dialog, or nil
    * parent: Transient parent of the dialog, or nil
    * action: Open or save mode for the dialog(Gtk::FileChooser::Action)
    * backend: The name of the specific filesystem backend to use or nil. (e.g.) "gnome-vfs" 
    * [button_face1, response_id1], [button_face2, response_id2], ...: Button face/response ID pairs should be listed.        
       * button_face: Button face can be either a stock ID(Gtk::Stock constants) such as Gtk::Stock::OK, or some arbitrary text. 
       * response_id: A response ID can be any positive number, or one of the values in the ((<Gtk::Dialog#ResponseType>)) enumeration. If the user clicks one of these dialog buttons, Gtk::Dialog will emit the "response" signal with the corresponding response ID. If a Gtk::Dialog receives the "delete_event" signal, it will emit "response" with a response ID of Gtk::Dialog::RESPONSE_DELETE_EVENT. However, destroying a dialog does not emit the "response" signal; so be careful relying on "response" when using the Gtk::Dialog::DESTROY_WITH_PARENT flag. Buttons are from left to right, so the first button in the list will be the leftmost button in the dialog.
    * Returns: a new Gtk::FileChooserDialog


=== Constants
:Action

  Describes whether a Gtk::FileChooser is being used to open existing files or to save to a possibly new file. Since 2.4

  * Gtk::FileChooser::ACTION_OPEN - Indicates open mode. The file chooser will only let the user pick an existing file.
  * Gtk::FileChooser::ACTION_SAVE - Indicates save mode. The file chooser will let the user pick an existing file, or type in a new filename.
  * Gtk::FileChooser::ACTION_SELECT_FOLDER - Indicates an Open mode for selecting folders. The file chooser will let the user pick an existing folder.
  * Gtk::FileChooser::ACTION_CREATE_FOLDER - Indicates a mode for creating a new folder. The file chooser will let the user name an existing or new folder.

{{image_right("dialog-fichoo-02.png")}}
{{br}}

 #!/usr/bin/env ruby
 require 'gtk2'

 # Allow the user to enter a new file name and location for
 # the file and set the button to the text of the location.
 def button_clicked (parent, btt)
   dialog = Gtk::FileChooserDialog.new(
       "Save File As ...",
       parent,
       Gtk::FileChooser::ACTION_SAVE,
       nil,
       [ Gtk::Stock::CANCEL, Gtk::Dialog::RESPONSE_CANCEL ],
       [ Gtk::Stock::SAVE, Gtk::Dialog::RESPONSE_ACCEPT ]
   )
   dialog.run do |response|
     if response == Gtk::Dialog::RESPONSE_ACCEPT
       filename = dialog.filename
       btt.label = filename
     end
   end
   dialog.destroy
 end

 window = Gtk::Window.new
 window.border_width = 10
 window.set_size_request(200, -1)
 window.title = "Save a File"
 window.signal_connect('delete_event') { false }
 window.signal_connect('destroy') { Gtk.main_quit }

 button = Gtk::Button.new("Save As ...")
 button.signal_connect('clicked') { button_clicked(window, button) }

 window.add(button)
 window.show_all
 Gtk.main
