= The Tree View Widget
{{link "tut-gtk2-treev-parts", "tut-gtk2-treev", "tut-gtk", "tut-gtk2-treev-rr"}}

== Using Gtk::TreeStore

There is one more type of built-in tree model called Gtk::TreeStore which provides the same functionality as Gtk::ListStore, except the data can be organized into a multilayered tree. Just like Gtk::ListStore, the Gtk::TreeStore object is a tree model for use with a Gtk::TreeView widget. It implements the Gtk::TreeModel interface, and inherits all of its methods. It also implements the Gtk::TreeSortable interface so you can sort the list using the view. Finally, it also implements the tree drag and drop interfaces.

{{image_right("treev-trees-ok.png")}}

Our example program "treestore.rb" is a revised version of the "Grocery List" program from the previous session, splitting the products into two categories: "Cleaning Supplies" and "Food", which both have children of their own. The quantity of each category is set initially to zero, and is calculated during the run-time, just momentarily before it is displayed as 4 and 7 respectively.  Note, there are two logical columns under the header ((*Buy.*)) The left logical column represents the parent column with a small expander triangle at the edge, slightly shifted to the right is the row of children.

{{br}}

((*treestore.rb*))

 #!/usr/bin/env ruby
 require 'gtk2'
 
 # Add three columns to the GtkTreeView. All three of the
 # columns will be displayed as text, although one is a boolean
 # value and another is an integer.
 def setup_tree_view(treeview)
   # Create a new GtkCellRendererText, add it to the tree
   # view column and append the column to the tree view.
   renderer = Gtk::CellRendererText.new
   column = Gtk::TreeViewColumn.new("Buy", renderer, "text" => $buy_index)
   treeview.append_column(column)
   renderer = Gtk::CellRendererText.new
   column = Gtk::TreeViewColumn.new("Count", renderer, "text" => $qty_index)
   treeview.append_column(column) 
   renderer = Gtk::CellRendererText.new
   column = Gtk::TreeViewColumn.new("Product", renderer, "text" => $prod_index)
   treeview.append_column(column)
 end
 
 window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
 window.resizable = true
 window.title = "Grocery List"
 window.border_width = 10
 window.signal_connect('delete_event') { Gtk.main_quit }
 window.set_size_request(275, 300)
 
 class GroceryItem
   attr_accessor :product_type, :buy, :quantity, :product
   def initialize(t,b,q,p)
     @product_type, @buy, @quantity, @product = t, b, q, p
   end
 end
 $buy_index = 0; $qty_index = 1; $prod_index = 2
 $p_category = 0; $p_child = 1
 
 list = Array.new
 list[0] = GroceryItem.new($p_category, true,  0, "Cleaning Supplies")
 list[1] = GroceryItem.new($p_child,    true,  1, "Paper Towels")
 list[2] = GroceryItem.new($p_child,    true,  3, "Toilet Paper")
 list[3] = GroceryItem.new($p_category, true,  0, "Food")
 list[4] = GroceryItem.new($p_child,    true,  2, "Bread")
 list[5] = GroceryItem.new($p_child,    false, 1, "Butter")
 list[6] = GroceryItem.new($p_child,    true,  1, "Milk")
 list[7] = GroceryItem.new($p_child,    false, 3, "Chips")
 list[8] = GroceryItem.new($p_child,    true,  4, "Soda")
 
 treeview = Gtk::TreeView.new
 setup_tree_view(treeview)
 
 # Create a new tree model with three columns, as Boolean, 
 # integer and string.
 store = Gtk::TreeStore.new(TrueClass, Integer, String)
 
 # Avoid creation of iterators on every iterration, since they
 # need to provide state information for all iterations. Hence:
 # establish closure variables for iterators parent and child.
 parent = child = nil
 
 # Add all of the products to the GtkListStore.
 list.each_with_index do |e, i|
 
   # If the product type is a category, count the quantity
   # of all of the products in the category that are going
   # to be bought.
   if (e.product_type == $p_category)
     j = i + 1
 
     # Calculate how many products will be bought in
     # the category.
     while j < list.size && list[j].product_type != $p_category
       list[i].quantity += list[j].quantity if list[j].buy
       j += 1
     end
     
     # Add the category as a new root (parent) row (element).
     parent = store.append(nil)
     # store.set_value(parent, $buy_index, list[i].buy) # <= same as below
     parent[$buy_index]  = list[i].buy
     parent[$qty_index]  = list[i].quantity
     parent[$prod_index] = list[i].product
 
   # Otherwise, add the product as a child row of the category.
   else
     child = store.append(parent)
     # store.set_value(child, $buy_index, list[i].buy) # <= same as below
     child[$buy_index]  = list[i].buy
     child[$qty_index]  = list[i].quantity
     child[$prod_index] = list[i].product
   end
 end
 
 # Add the tree model to the tree view
 treeview.model = store
 scrolled_win = Gtk::ScrolledWindow.new
 scrolled_win.add(treeview)
 scrolled_win.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC)
 window.add(scrolled_win)
 window.show_all
 Gtk.main

The only difference between a Gtk::TreeView with a Gtk::TreeStore instead of a Gtk::ListStore is in the creation of the ((*store*)) - a tree model with three columns defined as Boolean, integer and a string.


Adding columns and renderers renderers is performed in the same manner with both models, because columns are part of the view not the model:
:Reminder: What is MVC
    ((*model-view-controller*)) (MVC) design is a design method where the information and the way it is rendered are separated, which is similar to the relationship between Gtk::TreeView and Gtk::TreeBuffer. 


((*Tree stores*)) are initialized with Gtk::ListStore.new.

 # Create a new tree model with three columns, as Boolean,
 # integer and string.
 store = Gtk::ListStore.new(TrueClass, Integer, String)

However the most important difference is in how iterators and parent and child columns are handled. The first change that became an important feature in the ((*store*)) data initialization process was a new attribute called "product_type" in the GroceryItem class. This attribute decides whether a data item (a row, a record, or a tuple) is a product_category designated as the parent column in our data structure, or a grocery product which in our data structure is a child column of the product_category.

Hence, when we are creating rows we have to create a column of parents and a column of children. The two are created in a slightly different way. The first difference is in the argument to the row creation method Gtk::TreeStore#append(parent). Namely, if the argument here called parent is nil we are creating parent row, when it is a non-nil Gtk::TreeIter we are creating a child of the parent to which the  Gtk::TreeIter attribute points. Gtk::TreeStore#append method returns an iterator which points to the newly created empty data item (row, record, or tuple). This iterator is then used to assign values to the columns in the empty row. We add three columns, hence three lines with the method: Gtk::TreeStore#set_value(iter, column, value). Let's look at the code fragment that illustrates the above narrative:

 # Add all of the products to the GtkListStore.
 list.each_with_index do |e, i|

   if (e.product_type == $p_category)
        . . .
     # Add the category as a new root (parent) row (element).
     parent = store.append(nil)
     # store.set_value(parent, $buy_index, list[i].buy # <= same as below
     parent[$buy_index]  = list[i].buy
     parent[$qty_index]  = list[i].quantity
     parent[$prod_index] = list[i].product
 
   # Otherwise, add the product as a child row of the category.
   else
     child = store.append(parent)
     # store.set_value(child, $buy_index, list[i].buy # <= same as below
     child[$buy_index]  = list[i].buy
     child[$qty_index]  = list[i].quantity
     child[$prod_index] = list[i].product
   end
 end

=== Data Organization Within a Tree Store

One important thing to be notice is the sequential data organization within the tree store. This may be obvious from the way we set-up our array ((*list:*))

 list = Array.new
 list[0] = GroceryItem.new($p_category, true,  0, "Cleaning Supplies")
 list[1] = GroceryItem.new($p_child,    true,  1, "Paper Towels")
 list[2] = GroceryItem.new($p_child,    true,  3, "Toilet Paper")
 list[3] = GroceryItem.new($p_category, true,  0, "Food")
 list[4] = GroceryItem.new($p_child,    true,  2, "Bread")
 list[5] = GroceryItem.new($p_child,    false, 1, "Butter")
 list[6] = GroceryItem.new($p_child,    true,  1, "Milk")
 list[7] = GroceryItem.new($p_child,    false, 3, "Chips")
 list[8] = GroceryItem.new($p_child,    true,  4, "Soda")

Beside our initial setup of our array called ((*list*)) you will find numerous hints that this indeed is the case. Parent/child relationship dictates that we bundle together all children of a parent below it. When later on application inserts new rows, particularly children, they have to be inserted into, or better immediately after, the list children of such a group. This makes indices to certain rows ephemeral. For instance if you store (memorize) an index to a certain row that index will became invalid after an insertion or a deletion of a row positioned before the element (row) for which you have stored (memorized) the index. Also the orderly sequential organization of the rows in a tree store allows you to readily process the data, since you can always be sure about locations of rows and the groupings of the children can be determined in a predictable manner. In our example program we exploited this fact in the loop calculating the totals for the parents by iterating through their groups of children: 


 list.each_with_index do |e, i|
   # If the product type is a category, count the quantity
   # of all of the products in the category that are going
   # to be bought.
   if (e.product_type == $p_category)
     j = i + 1
     # Calculate how many products will be bought in
     # the category.
     while j < list.size && list[j].product_type != $p_category
       list[i].quantity += list[j].quantity if list[j].buy
       j += 1
     end
   . . .
 end

The same facts about the order of our data is exploited when we create parent and child columns as ordered rows:

 # Add all of the products to the GtkListStore.
 list.each_with_index do |e, i|
   if (e.product_type == $p_category)
     # Add the category as a new root (parent) row (element).
     parent = store.append(nil)
     parent[$buy_index]  = list[i].buy
     parent[$qty_index]  = list[i].quantity
     parent[$prod_index] = list[i].product
   # Otherwise, add the product as a child row of the category.
   else
     child = store.append(parent)
     child[$buy_index]  = list[i].buy
     child[$qty_index]  = list[i].quantity
     child[$prod_index] = list[i].product
   end
 end

== Multidimensional Tree Store

Recently I was inspired by a discussion on Ruby Forum to write a more elaborate  Tree Store  example implementing a multidimensional array with categories and subcategories, to reveal the mechanics behind it. It may not be immediately apparent how to create a deeper hierarchy of categories and subcategories. We learnt so far that Gtk::TreeStore#append(nil) creates a parent row. For instance we have a table with the following data:

 [ INDEX ] [ PARENT ] [ DATA ]
   0,        0,       "food"          >> ROOT Category
   1,        0,       "cheeses"       >> Sub-Category
   2,        1,       "cheddar"       >> Item 1
   3,        1,       "brie"          >> Item 2
   4,        0,       "beverages"     >> ROOT Category
   5,        4,       "non-alcohol"   >> Sub-Category
   6,        5,       "pepsi"         >> Item 1
   7,        5,       "coke"          >> Item 2 
   8,        4,       "alcoholic"     >> Sub-Category
   9,        8,       "wine"          >> Item 1
  10,        8,       "brandy"        >> Item 2 

are the Sub-Categories also created by passing argument nil to the append method? Is there a requirement that the rows be ordered in a certain way. Can we append to the above table another food category for instance bread, after the non-food categories? How are the rows categories, subcategories and individual items related? 

{{image_right("treestore-multi-dim.png")}}

It turns out that only top-level parents are created by the call to append with the nil argument. How is then the grouping accomplished? All these issues are addressed in the following example. Note also that we also append the bred sub-category as mentioned above - apparently out of order - i.e. after the beverages.  



((*treestore-multi-dim.rb*))

 #!/usr/bin/env ruby
 require 'gtk2'
 
 class FoodItem
   attr_accessor :index, :parent, :desc, :qty, :measure, :price
   def initialize(i, p, d, q, m, pr)
     @index, @parent, @desc, @qty, @measure, @price = i, p, d, q, m, pr
   end
   DESC = 0; QTY = 1; PRC=2
 end
 
 class MultiColTreeStore
   attr_accessor :list, :treestore
 
   def initialize
     @list = [   # index  parent description    qty  measure prc 
       FoodItem.new( 0,  0,     "food",          0,  nil,   0.0),
       FoodItem.new( 1,  0,     "cheeses",       0,  nil,   0.0),
       FoodItem.new( 2,  1,     "cheddar",      10,  "lb",  2.5),
       FoodItem.new( 3,  1,     "brie",          5,  "lb",  5.0),
       FoodItem.new( 4,  0,     "beverages",     0,  nil,   0.0),
       FoodItem.new( 5,  4,     "non-alcohol",   0,  nil,   0.0),
       FoodItem.new( 6,  5,     "pepsi",        60,  "oz",  0.95),
       FoodItem.new( 7,  5,     "coke",         70,  "oz",  0.95),
       FoodItem.new( 8,  4,     "alcoholic",     0,  nil,   0.0),
       FoodItem.new( 9,  8,     "wine",         20,  "oz",  2.0),
       FoodItem.new(10,  8,     "brandy",        7,  "oz",  3.5),
       FoodItem.new(11,  0,     "breads",        0,  nil,   0.0),
       FoodItem.new(12, 11,     "white grain", 700,  "g",   3.75),
       FoodItem.new(13, 11,     "rye",          65,  "g",   2.5),
       FoodItem.new(14, 11,     "bagel",        30,  "g",   0.5)
     ]
 
     # Create a new tree model with three columns, as Boolean, 
     # integer and string.
     @treestore = Gtk::TreeStore.new(String, String, String)
 
     window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
     window.resizable = true
     window.title = "Multi-dim Tree Store"
     window.border_width = 10
     window.signal_connect('delete_event') { Gtk.main_quit }
     window.set_size_request(275, 300)
 
 
     treeview = Gtk::TreeView.new
     setup_tree_view(treeview)
 
     # Populate trestore
     food      = fill_row(nil,       0)
     cheese    = fill_row(food,      1)
     item      = fill_row(cheese,    2)
     item      = fill_row(cheese,    3)
     beverage  = fill_row(nil,       4)
     nalcho    = fill_row(beverage,  5)
     item      = fill_row(nalcho,    6)
     item      = fill_row(nalcho,    7)
     alcho     = fill_row(beverage,  8)
     item      = fill_row(alcho,     9)
     item      = fill_row(alcho,    10)
     bread     = fill_row(food,     11)
     item      = fill_row(bread,    12)
     item      = fill_row(bread,    13)
     item      = fill_row(bread,    14)
 
     # Add the tree model to the tree view
     treeview.model = treestore
     scrolled_win = Gtk::ScrolledWindow.new
     scrolled_win.add(treeview)
     scrolled_win.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC)
     window.add(scrolled_win)
     window.show_all
   end
 
   # Add three columns to the GtkTreeView. Both columns will 
   # be displayed as text.
   def setup_tree_view(treeview)
     renderer = Gtk::CellRendererText.new
     column = Gtk::TreeViewColumn.new("Description", renderer, "text" => FoodItem::DESC)
     treeview.append_column(column)
     renderer = Gtk::CellRendererText.new
     column = Gtk::TreeViewColumn.new("Quantity", renderer, "text" => FoodItem::QTY)
     treeview.append_column(column) 
     renderer = Gtk::CellRendererText.new
     column = Gtk::TreeViewColumn.new("Price", renderer, "text" => FoodItem::PRC)
     treeview.append_column(column) 
   end
 
   def fill_row(iter, i)
     row = treestore.append(iter)
     row[FoodItem::DESC] =  list[i].desc 
     row[FoodItem::QTY]  = list[i].measure ? "%02d %s" % [list[i].qty, list[i].measure] : ""
     row[FoodItem::PRC]  = list[i].measure ? "$ %02.2f" % [list[i].price] : ""
     row
   end
 end 
 
 MultiColTreeStore.new
 
 Gtk.main
