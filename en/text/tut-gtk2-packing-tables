= Packing Using Tables
{{link "tut-gtk2-packing-demo", "tut-gtk2-packing-intro", "tut-gtk", "tut-gtk2-packing-tables-demo"}}

Let's take a look at another way of packing - Tables. These can be extremely useful in certain situations.

Using tables, we create a grid that we can place widgets in. The widgets may take up as many spaces as we specify.

The first thing to look at, of course, is the Gtk::Table.new constructor:

  Gtk::Table.new(rows, columns, homogeneous) 

The first argument is the number of rows to make in the table, while the second, obviously, is the number of columns.

The homogeneous argument has to do with how the table's boxes are sized. If homogeneous is true, the table boxes are resized to the size of the largest widget in the table. If homogeneous is false, the size of a table boxes is dictated by the tallest widget in its same row, and the widest widget in its column.

The rows and columns are laid out from 0 to n, where n was the number specified in Gtk::Table.new. So, if you specify rows = 2 and columns = 2, the layout would look something like this:

  .0          1          2
  0+----------+----------+
   |          |          |
  1+----------+----------+
   |          |          |
  2+----------+----------+

Note that the coordinate system starts in the upper left hand corner. To place a widget into a box, use the following method:

  Gtk::Table#attach(child, 
                    left_attach, right_attach, top_attach, bottom_attach, 
                    xoptions, yoptions, 
                    xpadding, ypadding)

The first argument ("child") is the widget you wish to place in the table.

The left and right attach arguments specify where to place the widget, and how many boxes to use. If you want a button in the lower right table entry of our 2x2 table, and want it to fill that entry only, left_attach would be = 1, right_attach = 2, top_attach = 1, bottom_attach = 2.

Now, if you wanted a widget to take up the whole top row of our 2x2 table, you'd use left_attach = 0, right_attach = 2, top_attach = 0, bottom_attach = 1.

The xoptions and yoptions are used to specify packing options and may be bitwise OR'ed together((-In Ruby, the OR operator is represented by the | (pipe) character.-)) to allow multiple options.

These options are:

:Gtk::FILL
 If the table box is larger than the widget, then this widget will expand to use all the room available.

:Gtk::SHRINK
 If the table widget was allocated less space then was requested (usually by the user resizing the window), then the widgets would normally just be pushed off the bottom of the window and disappear. If Gtk::SHRINK is specified, the widgets will shrink with the table.

:Gtk::EXPAND
 This will cause the table to expand to use up any remaining space in the window.

Padding is just like in Gtk::Box, creating a clear area around the widget specified in pixels.

Gtk::Table#attach has a lot of options. So, there's a shortcut:

  Gtk::Table#attach_defaults(widget, left_attach, right_attach, top_attach, bottom_attach)

The X and Y options default to Gtk::FILL | Gtk::EXPAND, and X and Y padding are set to 0. The rest of the arguments are identical to the previous method.

We also have Gtk::Table#set_row_spacing and Gtk::Table#set_col_spacing. These places spacing between the rows at the specified row or column.

  Gtk::Table#set_row_spacing(row, spacing)
  Gtk::Table#set_col_spacing(column, spacing) 

Note that for columns, the space goes to the right of the column, and for rows, the space goes below the row.

You can also set a consistent spacing of all rows and/or columns with:

  Gtk::Table#set_row_spacings(spacing)
  Gtk::Table#set_col_spacings(spacing) 

Note that with these calls, the last row and last column do not get any spacing.
