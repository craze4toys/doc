= class GLib::OutputStream

GLib::OutputStream has functions to write to a stream
(GLib::OutputStream#write), to close a stream (GLib::OutputStream#close) and to
flush pending writes (GLib::OutputStream#flush).

To copy the content of an input stream to an output stream without manually
handling the reads and writes, use GLib::OutputStream#splice.

All of these functions have async variants, too. 

== Object Hierarchy

* Object
  * GLib::Instantiatable
    * GLib::Object
      * GLib::OutputStream

== Known Subclasses

     * GFilterOutputStream
     * GFileOutputStream
     * GMemoryOutputStream
     * GUnixOutputStream

== Instance Methods

--- clear_pending

     Clears the pending flag on this GLib::OutputStream.

     * stream: Output stream

--- close(cancellable = nil)

     Closes the stream, releasing resources related to it.

     Once the stream is closed, further operations will raise
     GLib::IO::ClosedError, though closing a stream multiple times will not
     raise an error.

     Closing a stream will automatically flush any outstanding buffers in the
     stream.

     Streams will be automatically closed when the last reference is dropped,
     but you might want to call this function to make sure resources are
     released as early as possible.

     Some streams might keep the backing store of the stream (for example, a
     file descriptor) open after the stream is closed. See the documentation
     for the individual stream for details.

     On failure the first error that happened will be reported, but the close
     operation will finish as much as possible. A stream that failed to
     close will still raise GLib::IO::ClosedError for all operations. Still, it
     is important to check and report the error to the user, otherwise
     there might be a loss of data as all data might not be written.

     If ((|cancellable|)) is not nil, then the operation can be cancelled by
     triggering the cancellable object from another thread. If the operation
     was cancelled, GLib::IO::CancelledError will be raised.  Cancelling a
     close will still leave the stream closed, but there some streams can use a
     faster close that doesn’t block to, for example, check for errors. On
     cancellation (as with any error) there is no guarantee that all written
     data will reach the target.

     * cancellable: Optional cancellable object
     * Returns: self

--- close_async(io_priority = GLib::PRIORITY_DEFAULT, cancellable = nil){ |result| … }

     Requests an asynchronous close of the stream, releasing resources related
     to it. When the operation is finished, a GLib::AsyncResult will be
     yielded. You can then call GLib::OutputStream#close_finish to get the
     result of the operation.

     For behavior details see GLib::OutputStream#close.

     The asynchronous methods have a default fallback that uses threads to
     implement asynchronicity, so they are optional for inheriting classes.
     However, if you override one you must override all.

     * io_priority: The I/O priority of the request
     * cancellable: Optional cancellable object
     * result: A GLib::AsyncResult
     * Returns: self

--- close_finish(result)

     Closes an output stream.

     A GLib::IO::Error will be raised if closing failed.

     * stream: A GLib::OutputStream
     * result: A GLib::AsyncResult
     * Returns: self

--- closed?

     Checks if an output stream has already been closed.

     * stream: A GLib::OutputStream
     * Returns: true if the stream is closed

--- closing?

     Checks if an output stream is being closed. This can be used inside, for
     example, a flush implementation to see if the flush (or other I/O
     operation) is called from within the closing operation.

     Since 2.24

     * Returns: true if the stream is being closed

--- flush(cancellable = nil)

     Flushed any outstanding buffers in the stream. Will block during the
     operation. Closing the stream will implicitly cause a flush.

     This function is optional for inherited classes.

     If ((|cancellable|)) is not nil, then the operation can be cancelled by
     triggering the cancellable object from another thread. If the operation
     was cancelled, GLib::IO::CancelledError will be raised.

     * cancellable: Optional cancellable object
     * Returns: true on success

--- flush_async(io_priority = GLib::PRIORITY_DEFAULT, cancellable = nil){ |result| … }

     Flushes a stream asynchronously.  For behaviour details see
     GLib::OutputStream#flush.

     When the operation is finished, a GLib::AsyncResult will be yielded. You
     can then call GLib::OutputStream#flush_finish to get the result of the
     operation.

     * io_priority: The I/O priority of the request
     * cancellable: Optional GLib::Cancellable object, nil to ignore
     * result: A GLib::AsyncResult
     * Returns: self

--- flush_finish(result)

     Finishes flushing an output stream.

     A GLib::IO::Error will be raised if flushing failed.

     * stream: A GLib::OutputStream
     * result: A GLib::AsyncResult
     * Returns: self

--- has_pending?

     Checks if an ouput stream has pending actions.

     * stream: A GLib::OutputStream
     * Returns: true if the stream has pending actions

--- set_pending

     Sets the stream to have actions pending. If the pending flag is already
     set or the stream is closed, a GLib::IO::Error will be raised.

     * Returns: self

--- splice(source, flags = GLib::OutputStream::SPLICE_NONE, cancellable = nil)

     Splices an input stream into an output stream.

     * source: A GLib::InputStream
     * flags: A set of GLib::OutputStream::SpliceFlags
     * cancellable: Optional GLib::Cancellable object, nil to ignore
     * Returns: A Fixnum or Bignum containing the size of the data spliced

--- splice_async(source, flags = GLib::OutputStream::SPLICE_NONE, io_priority = GLib::PRIORITY_DEFAULT, cancellable = nil){ |result| … }

     Splices a stream asynchronously.  When the operation is finished, a
     GLib::AsyncResult will be yielded.  You can then call
     GLib::OutputStream#splice_finish to get the result of the operation.

     For the synchronous, blocking version of this function, see
     GLib::OutputStream#splice.

     * source: A GLib::InputStream
     * flags: A set of GLib::OutputStream::SpliceFlags
     * io_priority: The I/O priority of the request
     * cancellable: Optional GLib::Cancellable object, nil to ignore
     * result: A GLib::AsyncResult
     * Returns: self

--- splice_finish(result)

     Finishes an asynchronous stream splice operation.

     A GLib::IO::Error will be raised if splicing failed.

     * result: A GLib::AsyncResult
     * Returns: A Fixnum or Bignum containing the size of the data spliced

--- write(buffer, cancellable = nil)

     Tries to write ((|buffer|)) into the stream. Will block during the
     operation.

     If buffer is empty, returns 0 and does nothing. A buffer longer than
     GLib::MAXSSIZE will raise GLib::IO::InvalidArgumentError.

     On success, the number of bytes written to the stream is returned.
     It is not an error if this is not the same as the requested size, as it
     can happen, for example, on a partial I/O error, or if there is not enough
     storage in the stream. All writes block until at least one byte
     is written or an error occurs; 0 is never returned (unless buffer is
     empty).

     If ((|cancellable|)) is not nil, then the operation can be cancelled by
     triggering the cancellable object from another thread. If the operation
     was cancelled, GLib::IO::CancelledError will be raised. If an operation
     was partially finished when the operation was cancelled the partial result
     will be returned, without an error.

     * buffer: The buffer containing the data to write
     * cancellable: Optional cancellable object
     * Returns: Number of bytes written

--- write_all(buffer, cancellable = nil)

     Tries to write ((|buffer|)) into the stream. Will block during the
     operation.

     This function is similar to GLib::OutputStream#write, except it tries to
     write as many bytes as requested, only stopping on an error.

     * buffer: The buffer containing the data to write
     * cancellable: Optional GLib::Cancellable object, nil to ignore
     * Returns: Number of bytes written

--- write_async(buffer, io_priority = GLib::PRIORITY_DEFAULT, cancellable = nil){ |result| … }

     Request an asynchronous write of ((|buffer|)) into the stream. When the
     operation is finished, a GLib::AsyncResult will be yielded. You can then
     call GLib::OutputStream#write_finish to get the result of the operation.

     During an async request no other sync and async calls are allowed,
     and will raise GLib::IO::PendingError.

     A buffer longer than GLib::MAXSSIZE will raise
     GLib::IO::InvalidArgumentError.

     On success, the number of bytes written will be yielded inside a
     GLib::AsyncResult. It is not an error if this is not the same as the
     requested size, as it can happen, for example, on a partial I/O error, but
     generally we try to write as many bytes as requested.

     You are guaranteed that this method will never fail with
     GLib::IO::WouldBlockError – if the stream can’t accept more data, the
     method will just wait until this changes.

     Any outstanding I/O request with higher priority (lower numerical value)
     will be executed before an outstanding request with lower priority.
     Default priority is GLib::PRIORITY_DEFAULT.

     The asyncronous methods have a default fallback that uses threads to
     implement asynchronicity, so they are optional for inheriting classes.
     However, if you override one you must override all.

     For the synchronous, blocking version of this function, see
     GLib::OutputStream#write.

     * buffer: The buffer containing the data to write
     * io_priority: The I/O priority of the request
     * cancellable: Optional GLib::Cancellable object, nil to ignore
     * result: A GLib::AsyncResult
     * Returns: self

--- write_finish(result)

     Finishes a stream write operation.

     A GLib::IO::Error will be raised if writing failed.

     * result: A GLib::AsyncResult
     * Returns: A Fixnum or Bignum containing the number of bytes written to
       the stream


== Constants

--- SPLICE_CLOSE_SOURCE

     Close the source stream after the splice

--- SPLICE_CLOSE_TARGET

     Close the target stream after the splice

--- SPLICE_NONE

     Don’t close either stream

== See Also

== ChangeLog


