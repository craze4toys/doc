= O Problema com o Olá Mundo
{{link("tut-gst-helloworld-conclusion", nil, "tut-gst", "tut-gst-mime-types")}}

A pequena aplicação que a gente criou no capítulo anterior usou o conceito de fábrica para criar os elementos. Neste capítulo a gente mostrará a você como usar os conceitos de fábrica para criar elementos baseados no que eles fazem, em vez de como eles são chamados.

A gente primeiro explicará os conceitos involvidos antes de continuarmos com o exemplo de "Olá Mundo" refeito usando "autoplugging". 

Se a gente der outra olhada em como os elementos foram criados no exemplo anterior, a gente usou um mecanismo "sem acabamento":

  ...
  # agora é hora de pegar o "parser"
  decoder = Gst::ElementFactory.make("mad")
  ...

Enquanto esse mecanismo é bastante efetivo, ele também tem alguns problemas grandes: Os elementos são criados baseados nos seus nomes. De fato, a gente cria um elemento, "mad", colocando explicitamente o nome do elemento "mad". Nosso pequeno programa, assim, sempre usará o elemento decodificador "mad" para decodificar o fluxo de áudio de MP3, mesmo se existem outros decodificadores de MP3 no sistema. A gente verá como a gente pode usar uma maneira mais geral para criar um elemento decodificador de MP3.

A gente tem que introduzir o conceito de tipos de "MIME" e capacidades adicionadas aos "pads" de origem e "sink". 