= Gerenciando Valores e "Models" de Dados
{{link("tut-libgda-exec-queries", nil, "tut-libgda", "tut-libgda-transactions")}}

Cada vez que a gente executa uma querie normal, a gente precisa obter um objeto Gda::DataModel, o qual é a maneira de ver o que a query retornou.

Antes de continuar, a gente precisa dizer que é possível modificar um "model" de dados, mas como estamos acessando usando SQL, não é recomendado modificá-lo, assim as modificações no banco de dados precisam ser feitas usando SQL.

Um "model" de dados contém um conjunto de linhas (Gda::Row), de acordo com a query. As linhas contêm um conjunto de valores (Gda::Value) para cada coluna do "model" de dados. Valores embutem vários tipos de dados (strings, integers, booleans, dates, money currencies, etc...).

Você pode usar Gda::Value#to_s para recuperar uma representação de string de um valor de GDA, e você pode comparar valores usando Gda::Value#<=>. 

[FAZER: introduzir métodos de conversão Gda::Value#to_*]

== Exemplo Usando Acesso Direto de Célula

Este método acessa o "model" de dados acessando diretamente as células, usando Gda::DataModel#get_value_at:

  def show_table(dm)
      # Loop para escrever os nomes das colunas.
      dm.n_columns.times { |n_col| puts dm.get_column_title(n_col) }
      puts ""
      # Duplo loop acessando valores usando Gda::DataModel#get_value_at.
      dm.n_rows.times do |n_row|
          dm.n_columns.times do |n_col|
              # Dados retornados são objetos Gda::Value.
              val = dm.get_value_at(n_col, n_row)
              puts val.to_s
          end
      end
  end

== Exemplo Usando Acesso de Linha

Este método acessa o "model" de dados acessando as linhas, usando Gda::DataModel#get_row e Gda::DataModel#get_value:

  def show_table2(dm)
      # Loop para escrever os nomes das colunas.
      dm.n_columns.times { |n_col| puts dm.get_column_title(n_col) }
      puts ""
      # Loop externo obtendo linhas usando Gda::DataModel#get_row.
      dm.n_rows.times do |n_row|
          row = dm.get_row(n_row)
          # Loop interno obtendo o valor usnado Gda::DataModel#get_value.
          dm.n_columns.times do |n_col|
              val = row.get_value(n_col)
              puts val.to_s
          end
      end
  end

== Exemplo Usando o "Jeito de Ruby" ('The Ruby Way')

Para a sua conveniência, a Ruby/Libgda provê uma maneira mais Ruby para acessar valores em "models" de dados.

Apenas olhe os métodos a seguir: Gda::DataModel#each_column, Gda::DataModel#columns, Gda::DataModel#each_row, Gda::DataModel#rows, Gda::Row#each_value e Gda::Row#values.

Eis um exemplo usando iteradores:

  def show_table3(dm)
      dm.each_column { |title| puts title }
      puts ""
      dm.each_row { |row| row.each_value { |val| puts val.to_s } }
  end

A vida é boa, não ? ;-) 