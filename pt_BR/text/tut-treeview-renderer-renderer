= Renderizadores de Célula
{{link "tut-treeview-renderer", "tut-treeview-renderer", "tut-treeview", "tut-treeview-renderer-attributes"}}

Diferentes renderizadores de célula existem para diferentes propósitos:

* Gtk::CellRendererText renderiza valores de strings ou numbers ou boolean como strings de texto ("Silva", "99.32", "true")
* Gtk::CellRendererPixbuf é usado para mostrar imagens; imagens definidas pelo usuário ou um dos ícones de estoque incluídos.
* Gtk::CellRendererToggle mostra um valor boolean na forma de uma caixa de verificação ("check box") ou como um "radio button".
* Gtk::CellEditable é uma célula especial que implementa células editáveis (i.e., Gtk::Entry ou Gtk::SpinButton em um "tree view")

Contrariamente a o que alguém poderia pensar, um renderizador de célula não renderiza apenas uma única célula, mas é responsável por renderizar parte ou tudo de uma coluna de "tree view" para cada linha. Ele basicamente inicia na primeira linha e renderiza a sua parte da coluna lá. Então ele vai para a próxima linha e renderiza a sua parte lá novamente. E assim por diante.

Como um renderizador de célula sabe o que renderizar ? Um objeto de renderizador de célula tem certas 'propriedades' que estão na documentação de referência (exatamente igual a maioria dos outros objetos e componentes). Essas propriedades determinam o que o renderizador de célula vai renderizar e como será renderizado. Sempre que o renderizador de célula é chamado para renderizar uma certa célula, ele olha nas suas propriedades e renderiza a célula de acordo. Isso significa que sempre que você configurar uma propriedade ou alterar uma propriedade de um renderizador de célula, isso afetará todas as linhas que serão renderizadas após a alteração, até que você altere a propriedade novamente.

Eis um exemplo simples e sem grande utilidade que demonstra esse comportamento e introduz algumas das propriedades mais comumente utilizadas de Gtk::CellRendererText:

  require 'gtk2'

  treestore = Gtk::TreeStore.new(String, String)
                                                                                                                               
  # Adiciona uma linha de nívle superior e a deixa vazia
  parent = treestore.append(nil)
                                                                                                                               
  # Adiciona um filho a linha de nível superior e o preenche com alguns dados
  iter = treestore.append(parent)
  iter[0] = "José"
  iter[1] = "Silva"
                                                                                                                               
  # Adiciona um segundo filho a linha de nível superior e o preenche com alguns dados
  iter = treestore.append(parent)
  iter[0] = "Ana"
  iter[1] = "Maria"
                                                                                                                               
  view = Gtk::TreeView.new(treestore)
  view.selection.mode = Gtk::SELECTION_NONE                                                                                                                               
                                                                                                                               
  # Cria um renderizador e configura a propriedade 'text'
  renderer = Gtk::CellRendererText.new
  renderer.text = "Boooo!"
                                                                                                                               
  # Adiciona uma coluna usando o nosso renderizador
  col = Gtk::TreeViewColumn.new("Primeiro Nome", renderer)
  view.append_column(col)
                                                                                                                                                                                                                                                               
  # Cria outro renderizador e configura a propriedade 'background'
  renderer = Gtk::CellRendererText.new
  renderer.background = "orange"
                                                                                                                               
  # Adiciona uma coluna usando o segundo renderizador
  col = Gtk::TreeViewColumn.new("Segudo Nome", renderer)
  view.append_column(col)
  
  window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
  window.signal_connect("delete_event") { Gtk.main_quit; exit! }
  window.add(view)
  window.show_all
                                                                                                                               
  Gtk.main

{{image_right "en:renderer.png"}}

Parece que a tela do "tree view" está parcialmente correta e parcialmente incompleta. Por um lado o "tree view" renderiza o número correto de linhas (note como não existe laranja ou "orange" na direita após a linha 3), e ele mostra a hierarquia corretamente (na esquerda), mas não mostra qualquer dos dados que armazenamos no "model". Isso é porque não fizemos conexão entre o que os renderizadores de célula devem renderizar e os dados no "model". Nós simplesmente configuramos algumas propriedades de renderizador de célula durante a inicialização, e o renderizador de célula adere meticulosamente a aquelas propriedades configuradas.
