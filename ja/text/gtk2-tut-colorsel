= カラーセレクション 
カラーセレクションウィジェットは，あなたの予想通り，対話的に色を選択するためのウィジェットである．
この複合ウィジェットはRGB(Red, Green, Blue)とHSV(Hue, Saturation, Value)の3つの値を操作してユーザに色を選択させるものである．
オプションとして色の不透明さも設定することができる．

カラーセレクションウィジェットは今のところ"color_changed"シグナルのみを発行する．
これはユーザが色を変更するか，あるいはGtk::ColorSelection#set_colorで明示的に設定されてウィジェットの現在の色が変更されると必ず発行される．

カラーセレクションウィジェットが提供してくれるものを見てみよう．
このウィジェットは2つの種類がある：
Gtk::ColorSelectionとGtk::ColorSelectionDialogである．

  Gtk::ColorSelection.new

おそらくこのコンストラクタを直接使うことはないだろう．
この方法だと，親を持たないGtk::ColorSelectionウィジェットを作成するため，自前で親となるウィンドウを用意しなければならないからだ．
なお，Gtk::ColorSelectionはGtk::VBoxから派生するクラスである．

  Gtk::ColorSelectionDialog.new(title = nil)
 
こちらがより一般的なコンストラクタである．
((-APIリファレンス等でメソッドを調べる際は，それがGtk::ColorSelectionのメソッドなのかGtk::ColorSelectionDialogのメソッドなのかに注意すること．-))
Gtk::ColorSelectionDialogはGtk::ColorSelectionウィジェットを含んだGtk::Frameと，Gtk::HSeparator及び3つのボタン"OK"，"Cancel"，"Help"を含むGtk::HBoxから構成される．
これらのボタンはそれぞれGtk::ColorSelectionDialog#ok_button，Gtk::ColorSelectionDialog#cancel_button，Gtk::ColorSelectionDialog#help_buttonで取得できる．

  Gtk::ColorSelection#has_opacity_control=(has_opacity)
  Gtk::ColorSelection#set_has_opacity_control(has_opacity)

カラーセレクションウィジェットでは(alphaチャネルとしても知られている)色の不透明度の調整もできる．
この機能はデフォルトでは無効にされているので，不透明度の調整をしたい場合はhas_opacity引数をtrueにしてこのメソッドを呼び出す．

  Gtk::ColorSelection#current_color=(color)
  Gtk::ColorSelection#current_alpha=(alpha)
  Gtk::ColorSelection#set_current_color(color)
  Gtk::ColorSelection#set_current_alpha(alpha)

現在を色を明示的に指定するには，Gdk::Colorのインスタンスを引数にGtk::ColorSelection#set_current_colorを呼び出せばよい．
同様に不透明度を明示的に指定するには，Gtk::ColorSelection#set_current_alphaを呼び出せばよい．
alpha引数は0(完全に透明)から65535(完全に不透明)までの整数である．

  Gtk::ColorSelection#current_color
  Gtk::ColorSelection#current_alpha

現在の色を取得する必要がある場合は(よくあるのは"color_changed"シグナルを受信したときであるが)このメソッドを用いる．

{{image_right "colorsel.png"}}

以下はGtk::ColorSelectionDialogの使用法の簡単なデモである．
プログラムはドローイングエリアを含むウィンドウを表示する．
ドローイングエリア内でマウスのボタンをクリックするとカラーセレクションダイアログが開き，カラーセレクションダイアログで色を変更するとドローイングエリアのバックグラウンドカラーが変更される．

{{br}}

  #! /usr/bin/env ruby
  
  require 'gtk2'
  
  def area_event(area, e)
        if Gdk::EventButton === e
                colorsel_d = Gtk::ColorSelectionDialog.new("Select background color")
                color = area.modifier_style.bg(Gtk::STATE_NORMAL)
                colorsel = colorsel_d.colorsel
                colorsel.previous_color = color
                colorsel.current_color = color
  
                colorsel.has_palette = true
                colorsel.has_opacity_control = true
                colorsel.signal_connect("color_changed") do |w|
                        ncolor = w.current_color
                        area.modify_bg(Gtk::STATE_NORMAL, ncolor)
                end
                unless colorsel_d.run == Gtk::ColorSelectionDialog::RESPONSE_OK
                        area.modify_bg(Gtk::STATE_NORMAL, color)
                end
                colorsel_d.destroy
                true
        else
                false
        end
  end
  
  window = Gtk::Window.new
  window.title = "Color Selection test"
  window.resizable = true
  
  window.signal_connect("delete_event") do
        Gtk.main_quit
        true
  end
  
  drawingarea = Gtk::DrawingArea.new
  drawingarea.modify_bg(Gtk::STATE_NORMAL, Gdk::Color.new(0, 0, 65535))
  
  window.set_size_request(200, 200)
  drawingarea.set_events(Gdk::Event::BUTTON_PRESS_MASK)
  drawingarea.signal_connect("event") {|w, e| area_event(w, e)}
  
  window.add(drawingarea)
  window.show_all
  
  Gtk.main
