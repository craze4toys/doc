= class Gtk::Printer

== Object Hierarchy
* Object
  * GLib::Instantiatable
    * GLib::Object
      * Gtk::Printer

== Class Methods
--- Gtk::Printer.each(wait=false, &block)
     Calls a function for all Gtk::Printer. If ((|func|))
     returns true, the enumeration is stopped.

     * wait: if true, wait in a recursive mainloop until all
       printers are enumerated; otherwise return early

--- Gtk::Printer.new(name, backend, virtual)
     Creates a new Gtk::Printer.

     * name: the name of the printer
     * backend: a Gtk::PrintBackend
     * virtual: whether the printer is virtual
     * Returns: a new Gtk::Printer

== Instance Methods
--- <=>(other)
     Compares two printers.

     * Returns: 0 if the printer match, a negative value if
       ((|self|)) < ((|other|)), or a positive value if
       ((|self|)) > ((|other|))

--- active?
     Returns whether the printer is currently active
     (i.e. accepts new jobs).

     * Returns: true if self is active

--- default?
     Returns whether the printer is the default printer.

     * Returns: true if self is the default

--- description
     Gets the description of the printer.

     * Returns: the description of printer.

--- accepts_pdf?
    Gets the true if this printer can accept PDF.
     * Returns: true if this printer can accept PDF
--- accepts_pdf=(accepts_pdf)
    Sets the true if this printer can accept PDF.
     * accepts_pdf: true if this printer can accept PDF
     * Returns: accepts_pdf
--- set_accepts_pdf(accepts_pdf)
    Same as accepts_pdf=.
     * accepts_pdf: true if this printer can accept PDF
     * Returns: self

--- accepts_ps?
    Gets the true if this printer can accept PostScript.
     * Returns: true if this printer can accept PostScript
--- accepts_ps=(accepts_ps)
    Sets the true if this printer can accept PostScript.
     * accepts_ps: true if this printer can accept PostScript
     * Returns: accepts_ps
--- set_accepts_ps(accepts_ps)
    Same as accepts_ps=.
     * accepts_ps: true if this printer can accept PostScript
     * Returns: self

--- backend
    Gets the Backend for the printer.
     * Returns: Backend for the printer
--- backend=(backend)
    Sets the Backend for the printer.
     * backend: Backend for the printer
     * Returns: backend
--- set_backend(backend)
    Same as backend=.
     * backend: Backend for the printer
     * Returns: self

--- icon_name
    Gets the icon name to use for the printer.
     * Returns: The icon name to use for the printer

--- virtual?
    Gets the FALSE if this represents a real hardware printer.
     * Returns: FALSE if this represents a real hardware printer
--- virtual=(virtual)
    Sets the FALSE if this represents a real hardware printer.
     * virtual: FALSE if this represents a real hardware printer
     * Returns: virtual
--- set_virtual(virtual)
    Same as virtual=.
     * virtual: FALSE if this represents a real hardware printer
     * Returns: self

--- job_count
    Gets the Number of jobs queued in the printer.
     * Returns: Number of jobs queued in the printer

--- location
    Gets the location of the printer.
     * Returns: The location of the printer

--- name
    Gets the Name of the printer.
     * Returns: Name of the printer
--- name=(name)
    Sets the Name of the printer.
     * name: Name of the printer
     * Returns: name
--- set_name(name)
    Same as name=.
     * name: Name of the printer
     * Returns: self

--- state_message
    Gets the String giving the current state of the printer.
     * Returns: String giving the current state of the printer

== Properties
--- accepts-pdf: true or false (Read/Write)
    true if this printer can accept PDF

--- accepts-ps: true or false (Read/Write)
    true if this printer can accept PostScript

--- backend: Gtk::PrintBackend (Read/Write)
    Backend for the printer

--- icon-name: String (Read)
    The icon name to use for the printer

--- is-virtual: true or false (Read/Write)
    FALSE if this represents a real hardware printer

--- job-count: Integer (Read)
    Number of jobs queued in the printer

--- location: String (Read)
    The location of the printer

--- name: String (Read/Write)
    Name of the printer

--- state-message: String (Read)
    String giving the current state of the printer

== Signals
--- details-acquired: self, success

     Gets emitted in response to a request for detailed
     information about a printer from the print backend. The
     ((|success|)) parameter indicates if the information was
     actually obtained.

     * self: the Gtk::Printer on which the signal is emitted
     * success: true if the details were successfully acquired

== See Also

== ChangeLog

* 2006-07-10: updated for 2.10. - ((<kou>))

- ((<kou>))
