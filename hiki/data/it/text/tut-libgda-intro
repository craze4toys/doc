= Introduzione

== Cos'è GDA

ODBC ed SQL sono standard ormai stabili. Il problema è che ODBC  non specifica il 'wire protocol', il modo in cui ci si collega, e per alcuni database non esistono driver ODBC. Potreste usare RPC, TCP/IP, o memoria condivisa e segnali per passare la richiesta dal client al server. Dunque dovrete usare una libreria ODBC specifica per il database. 
Ma questa libreria potrebbe non essere disponibile per la CPU o il sistema operativo che state usando per il client.

SQL stesso non è abbastanza standardizzato, dunque la compatibilità tra le sorgenti non può venire assicurata per tutti i DBMS. E per alcune sorgenti di dati, non è nemmeno possibile usare SQL (pensate ad LDAP).

GDA cerca di risolvere il problema di ODBC e di aiutare a risolvere il problema di SQL.
Si tratta di una sorta di middleware (o si può pensare di farlo funzionare come un layer middleware ) per accedere a differenti sorgenti di dati (datasource). GDA offre una visuale di alto livello delle sorgenti dati ed ha dei punti nei quali è possibile inserire codice di basso livello per l'accesso al database per compiti particolari.

GNOME Data Access (GDA) è definito come un insieme di plug-in di interfaccia.
Il livello di astrazione fornito da GDA rende possibile l'accesso ad ogni datasource, 
posto che sia stato scritto un plug-in che implementi l'interfaccia di accesso a quella particolare sorgente.

GDA offre un wrapper per i meccanismi interni del database, rendendo semplice per i programmatori l'uso delle potenzialità fornite da molti RDBMS senza la necessità di conoscerle. 
GDA viene fornito con una libreria, sia per i client che per i server, come implementazione C di questa architettura. Questo livello di astrazione renderebbe possibile, in momenti successivi, il cambiamento di tutti i meccanismi interni senza la necesità di modificare le applicazioni che usino le librerie.

Insieme a queste libreria (ed ai file header associati ed ai bindings per altri linguaggi), libgda include diversi strumenti ed utility per aiutarvi nello sviluppo di applicazioni basate su libgda, così come per l'automazione di alcuni compiti di gestione dei database.

libgda è implementata per sistemi operativi UNIX-like (incluso Linux), e non dipende da altre librerie, tranne libxml2 e Glib, il che lo rende un sistema leggero ideale anche per applicazioni che debbano funzionare su sistemi con hardware limitato. 
Un tempo libgda era parte del progetto GNOME-DB, e ne è ancora la base, ma ne è stato separato per imuovere tutte le dipendenze da GNOME e permettere dunque lo sviluppo di applicazioni non-GNOME basate su di essa. 

== Ruby/Libgda

Ruby è "il linguaggio di scripting interpretato per la programmazione object oriented facile e veloce". Esso ha una sintassi semplice per l'uso di Eccezioni, per semplificare la gestione degli errori. Gli operatori sono in realtà metodi con un po' di 'syntax sugar', e possono essere ridefiniti facilmente. Ruby è un linguaggio veramente OO. Ciò significa che tutto in rubyè un oggetto. Ruby è anche multipiattaforma, e funziona su molti tipi di UNIX, DOS, Windows, Mac, etc.

Ruby/Libgda è un binding per il linguaggio Ruby per l'uso della libreria GDA.  Esso fornisce un metodo per accedere dati da tutti i provider supportati da libgda in Ruby.  E' parte del progetto Ruby-GNOME2.