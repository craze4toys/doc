= class GLib::Timer

GLib::Timer object keeps track of elapsed time in microseconds and fractions of a seconds. When you create a timer objects it automatically starts up by calling GLib::Timer#start. You can stop or continue a stopped timer with GLib::Timer#stop ant GLib::Timer#continue methods respectively. Unless you have stopped the timer, you can at any point in your application retrieve the elapsed time by calling GLib::Timer#elapsed method. Currently  (as of Ruby 1.8.6 and Ruby-GNOME2 rel.: 2-0.17.0-rc1), the GLib::Timer#destroy method is not implemented.

== Object Hierarchy

* Object
  * GLib::Boxed
    * GLib::Timer

== Class Methods

--- GLib::Timer.new

    Creates a new timer object
    * Returns: self

== Instance Methods

--- continue

    Wakes up (restarts) previously stopped timer.
    * Returns: self

--- destroy

    Currently  (as of Ruby 1.8.6 and Ruby-GNOME2 rel.: 2-0.17.0-rc1), the GLib::Timer#destroy method is not implemented.
    * N/A

--- elapsed

    Retrieve the elapsed time in the form of [ seconds, microseconds ]
    * Returns: the array [ seconds, microseconds ].

--- stop

    Stops the timer.
    * Returns: self

--- reset

     * Returns: self: ((*FIXME*))

--- start

     * Returns: self: ((*FIXME*))

== See Also

GLib::Timeout, GLib::Idle

== ChangeLog

:2009-01-31 Added - ((<igor-info>))
