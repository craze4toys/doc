= class Gnome::CanvasRichText

== Object Hierarchy

* Object
  * GLib::Instantiatable
    * GLib::Object
      * GLib::InitiallyUnowned
        * Gtk::Object
          * Gnome::CanvasItem
            * Gnome::CanvasRichText

== Instance Methods

--- anchor

    Gets the Anchor point for text.
     * Returns: Anchor point for text

--- anchor=(anchor)

    Sets the Anchor point for text.
     * anchor: Anchor point for text
     * Returns: anchor

--- buffer

     * Returns: self: ((*FIXME*))

--- buffer=

     * Returns: self: ((*FIXME*))

--- copy_clipboard

     * Returns: self: ((*FIXME*))

--- cursor_blink=(cursor_blink)

    Sets the Does the cursor blink in this rich text item?.
     * cursor_blink: Does the cursor blink in this rich text item?
     * Returns: cursor_blink

--- cursor_blink?

    Gets the Does the cursor blink in this rich text item?.
     * Returns: Does the cursor blink in this rich text item?

--- cursor_visible=(cursor_visible)

    Sets the Is the cursor visible in this rich text item?.
     * cursor_visible: Is the cursor visible in this rich text item?
     * Returns: cursor_visible

--- cursor_visible?

    Gets the Is the cursor visible in this rich text item?.
     * Returns: Is the cursor visible in this rich text item?

--- cut_clipboard

     * Returns: self: ((*FIXME*))

--- direction

    Gets the Text direction.
     * Returns: Text direction

--- direction=(direction)

    Sets the Text direction.
     * direction: Text direction
     * Returns: direction

--- editable=(editable)

    Sets the Is this rich text item editable?.
     * editable: Is this rich text item editable?
     * Returns: editable

--- editable?

    Gets the Is this rich text item editable?.
     * Returns: Is this rich text item editable?

--- get_iter_at_location

     * Returns: self: ((*FIXME*))

--- get_iter_location

     * Returns: self: ((*FIXME*))

--- grow_height=(grow_height)

    Sets the Should the text box height grow if the text does not fit?.
     * grow_height: Should the text box height grow if the text does not fit?
     * Returns: grow_height

--- grow_height?

    Gets the Should the text box height grow if the text does not fit?.
     * Returns: Should the text box height grow if the text does not fit?

--- height

    Gets the Height for text box.
     * Returns: Height for text box

--- height=(height)

    Sets the Height for text box.
     * height: Height for text box
     * Returns: height

--- indent

    Gets the Number of pixels for indentation.
     * Returns: Number of pixels for indentation

--- indent=(indent)

    Sets the Number of pixels for indentation.
     * indent: Number of pixels for indentation
     * Returns: indent

--- justification

    Gets the Justification mode.
     * Returns: Justification mode

--- justification=(justification)

    Sets the Justification mode.
     * justification: Justification mode
     * Returns: justification

--- left_margin

    Gets the Number of pixels in the left margin.
     * Returns: Number of pixels in the left margin

--- left_margin=(left_margin)

    Sets the Number of pixels in the left margin.
     * left_margin: Number of pixels in the left margin
     * Returns: left_margin

--- paste_clipboard

     * Returns: self: ((*FIXME*))

--- pixels_above_lines

    Gets the Number of pixels to put above lines.
     * Returns: Number of pixels to put above lines

--- pixels_above_lines=(pixels_above_lines)

    Sets the Number of pixels to put above lines.
     * pixels_above_lines: Number of pixels to put above lines
     * Returns: pixels_above_lines

--- pixels_below_lines

    Gets the Number of pixels to put below lines.
     * Returns: Number of pixels to put below lines

--- pixels_below_lines=(pixels_below_lines)

    Sets the Number of pixels to put below lines.
     * pixels_below_lines: Number of pixels to put below lines
     * Returns: pixels_below_lines

--- pixels_inside_wrap

    Gets the Number of pixels to put inside the wrap.
     * Returns: Number of pixels to put inside the wrap

--- pixels_inside_wrap=(pixels_inside_wrap)

    Sets the Number of pixels to put inside the wrap.
     * pixels_inside_wrap: Number of pixels to put inside the wrap
     * Returns: pixels_inside_wrap

--- right_margin

    Gets the Number of pixels in the right margin.
     * Returns: Number of pixels in the right margin

--- right_margin=(right_margin)

    Sets the Number of pixels in the right margin.
     * right_margin: Number of pixels in the right margin
     * Returns: right_margin

--- set_anchor(anchor)

    Same as anchor=.
     * anchor: Anchor point for text
     * Returns: self

--- set_buffer

     * Returns: self: ((*FIXME*))

--- set_cursor_blink(cursor_blink)

    Same as cursor_blink=.
     * cursor_blink: Does the cursor blink in this rich text item?
     * Returns: self

--- set_cursor_visible(cursor_visible)

    Same as cursor_visible=.
     * cursor_visible: Is the cursor visible in this rich text item?
     * Returns: self

--- set_direction(direction)

    Same as direction=.
     * direction: Text direction
     * Returns: self

--- set_editable(editable)

    Same as editable=.
     * editable: Is this rich text item editable?
     * Returns: self

--- set_grow_height(grow_height)

    Same as grow_height=.
     * grow_height: Should the text box height grow if the text does not fit?
     * Returns: self

--- set_height(height)

    Same as height=.
     * height: Height for text box
     * Returns: self

--- set_indent(indent)

    Same as indent=.
     * indent: Number of pixels for indentation
     * Returns: self

--- set_justification(justification)

    Same as justification=.
     * justification: Justification mode
     * Returns: self

--- set_left_margin(left_margin)

    Same as left_margin=.
     * left_margin: Number of pixels in the left margin
     * Returns: self

--- set_pixels_above_lines(pixels_above_lines)

    Same as pixels_above_lines=.
     * pixels_above_lines: Number of pixels to put above lines
     * Returns: self

--- set_pixels_below_lines(pixels_below_lines)

    Same as pixels_below_lines=.
     * pixels_below_lines: Number of pixels to put below lines
     * Returns: self

--- set_pixels_inside_wrap(pixels_inside_wrap)

    Same as pixels_inside_wrap=.
     * pixels_inside_wrap: Number of pixels to put inside the wrap
     * Returns: self

--- set_right_margin(right_margin)

    Same as right_margin=.
     * right_margin: Number of pixels in the right margin
     * Returns: self

--- set_text(text)

    Same as text=.
     * text: Text to display
     * Returns: self

--- set_visible(visible)

    Same as visible=.
     * visible: Is this rich text item visible?
     * Returns: self

--- set_width(width)

    Same as width=.
     * width: Width for text box
     * Returns: self

--- set_wrap_mode(wrap_mode)

    Same as wrap_mode=.
     * wrap_mode: Wrap mode for multiline text
     * Returns: self

--- set_x(x)

    Same as x=.
     * x: X position
     * Returns: self

--- set_y(y)

    Same as y=.
     * y: Y position
     * Returns: self

--- text

    Gets the Text to display.
     * Returns: Text to display

--- text=(text)

    Sets the Text to display.
     * text: Text to display
     * Returns: text

--- visible=(visible)

    Sets the Is this rich text item visible?.
     * visible: Is this rich text item visible?
     * Returns: visible

--- visible?

    Gets the Is this rich text item visible?.
     * Returns: Is this rich text item visible?

--- width

    Gets the Width for text box.
     * Returns: Width for text box

--- width=(width)

    Sets the Width for text box.
     * width: Width for text box
     * Returns: width

--- wrap_mode

    Gets the Wrap mode for multiline text.
     * Returns: Wrap mode for multiline text

--- wrap_mode=(wrap_mode)

    Sets the Wrap mode for multiline text.
     * wrap_mode: Wrap mode for multiline text
     * Returns: wrap_mode

--- x

    Gets the X position.
     * Returns: X position

--- x=(x)

    Sets the X position.
     * x: X position
     * Returns: x

--- y

    Gets the Y position.
     * Returns: Y position

--- y=(y)

    Sets the Y position.
     * y: Y position
     * Returns: y

== Properties

--- anchor: Gtk::AnchorType (Read/Write)

    Anchor point for text

--- cursor-blink: true or false (Read/Write)

    Does the cursor blink in this rich text item?

--- cursor-visible: true or false (Read/Write)

    Is the cursor visible in this rich text item?

--- direction: Gtk::DirectionType (Read/Write)

    Text direction

--- editable: true or false (Read/Write)

    Is this rich text item editable?

--- grow-height: true or false (Read/Write)

    Should the text box height grow if the text does not fit?

--- height: Float (Read/Write)

    Height for text box

--- indent: Integer (Read/Write)

    Number of pixels for indentation

--- justification: Gtk::Justification (Read/Write)

    Justification mode

--- left-margin: Integer (Read/Write)

    Number of pixels in the left margin

--- pixels-above-lines: Integer (Read/Write)

    Number of pixels to put above lines

--- pixels-below-lines: Integer (Read/Write)

    Number of pixels to put below lines

--- pixels-inside-wrap: Integer (Read/Write)

    Number of pixels to put inside the wrap

--- right-margin: Integer (Read/Write)

    Number of pixels in the right margin

--- text: String (Read/Write)

    Text to display

--- visible: true or false (Read/Write)

    Is this rich text item visible?

--- width: Float (Read/Write)

    Width for text box

--- wrap-mode: Gtk::WrapMode (Read/Write)

    Wrap mode for multiline text

--- x: Float (Read/Write)

    X position

--- y: Float (Read/Write)

    Y position

== Signals

--- tag-changed: self

     * self: Gnome::CanvasRichText: ((*FIXME*))

== See Also

== ChangeLog


