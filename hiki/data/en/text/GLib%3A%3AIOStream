= class GLib::IOStream

GLib::IOStream represents an object that has both read and write streams.
Generally the two streams acts as separate input and output streams, but they
share some common resources and state. For instance, for seekable streams they
may use the same position in both streams.

Examples of GLib::IOStream objects are GLib::SocketConnection which represents
a two-way network connection, and GLib::FileIOStream which represent a file
handle opened in read-write mode.

To do the actual reading and writing you need to get the substreams with
GLib::IOStream#input_stream GLib::IOStream#output_stream.

The GLib::IOStream object owns the input and the output streams, not the other way
around, so keeping the substreams alive will not keep the GLib::IOStream object
alive. If the GLib::IOStream object is freed it will be closed, thus closing the
substream, so even if the substreams stay alive they will always raise
GLib::IO::ClosedError for all operations.

To close a stream use GLib::IOStream#close which will close the common stream
object and also the individual substreams. You can also close the substreams
themselves. In most cases this only marks the substream as closed, so further
I/O on it fails. However, some streams may support “half-closed” states where
one direction of the stream is actually shut down. 

== Object Hierarchy

* Object
  * GLib::Instantiatable
    * GLib::Object
      * GLib::IOStream

== Instance Methods

--- clear_pending

     Clears the pending flag on this stream.

     * Returns: self

--- close(cancellable = nil)

     Closes the stream, releasing resources related to it. This will also
     closes the individual input and output streams, if they are not already
     closed.

     Once the stream is closed, all other operations will raise
     GLib::IO::ClosedError. Closing a stream multiple times will not return an
     error.

     Closing a stream will automatically flush any outstanding buffers in the
     stream.

     Streams will be automatically closed when the last reference is dropped,
     but you might want to call this function to make sure resources are
     released as early as possible.

     Some streams might keep the backing store of the stream (for example, a
     file descriptor) open after the stream is closed. See the documentation
     for the individual stream for details.

     On failure the first error that happened will be reported, but the close
     operation will finish as much as possible. A stream that failed to close
     will still raise GLib::IO::ClosedError for all operations. Still, it’s
     important to check and report the error to the user, otherwise there might
     be a loss of data as all data might not be written.

     If cancellable is not nil, then the operation can be cancelled by
     triggering the cancellable object from another thread. If the operation
     was cancelled, GLib::IO::CancelledError will be raised. Cancelling a close
     will still leave the stream closed, but some streams can use a faster
     close that doesn’t block to, for example, check for errors.

     The default implementation of this method just calls close on the
     individual input/output streams. 

     * Returns: self

--- close_async(io_priority = GLib::PRIORITY_DEFAULT, cancellable = nil){ |result| … }

     Requests an asynchronous close of the stream, releasing resources related
     to it. When the operation is finished callback will be called. You can
     then call GLib::IOStream#finish to get the result of the operation.

     For behaviour details, see GLib::IOStream#close.

     The asynchronous methods have a default fallback that uses threads to
     implement asynchronicity, so they are optional for inheriting classes.
     However, if you override one you must override all. 

     * io_priority: The I/O priority of the operation
     * cancellable: Optional GLib::Cancellable object, nil to ignore
     * Returns: self

--- close_finish(result)

     Closes a stream.

     A GLib::IO::Error is raised if the stream couldn’t be closed.

     * result: A GLib::AsyncResult
     * Returns: self

--- closed=(closed)

     Same As GLib::IOStream#set_closed.

     * Returns: ((|closed|))

--- closed?

     Checks if the stream is closed.

     * Returns: true if the stream is closed

--- has_pending?

     Checks if a stream has pending actions.

     * Returns: true if the stream has pending actions

--- input_stream

    Gets the GLib::InputStream to read from.

     * Returns: The GLib::InputStream to read from

--- output_stream

    Gets the GLib::OutputStream to write to.

     * Returns: The GLib::OutputStream to write to

--- set_closed(closed)

     Sets whether or not the stream is closed.

     * closed: true if the stream is to be considered closed.
     * Returns: self

--- set_pending

     Sets this stream to have actions pending.  A GLib::IO::Error will be
     raised, if the pending flag is already set or if this stream has been
     closed.

     * Returns: self

== Properties

--- closed: true or false (Read/Write)

     The streams “closed” status

     Default value: false

--- input-stream: GInputStream (Read)

    The GLib::InputStream to read from

--- output-stream: GOutputStream (Read)

    The GLib::OutputStream to write to

== See Also

== ChangeLog


