= class Gdk::EventClient
An event sent by another client application. 

== Object Hierarchy
* Object
  * GLib::Boxed
    * Gdk::Event
      * Gdk::EventAny
        * Gdk::EventClient

== Class Methods
--- Gdk::EventClient.new(type = Gdk::Event::CLIENT_EVENT)
    Creates a new event of the given type. All fields are set to 0. ((* Since 2.2 *))
    * type: Gdk::Event::CLIENT_EVENT
    * Returns: a new Gdk::EventClient.

== Instance Methods
--- message_type
    Gets the type of the message, which can be defined by the application. 
    * Returns: a Gdk::Atom of the type of the message
--- message_type=(type)
    Sets the type of the message, which can be defined by the application. 
    * type: a Gdk::Atom of the type of the message
    * Returns: type
--- set_message_type(type)
    Same as Gdk::EventClient#message_type=.
    * type: a Gdk::Atom of the type of the message
    * Returns: self

--- data_format
    Gets the format of the data, given as the number of bits in each data element, i.e. 8, 16, or 32. 
    * Returns: the format of the data.

--- data
    Gets the data as an Array.
    * Returns: data

--- send_client_message(winid, display = nil)
    Sends an X ClientMessage event to a given window (which must be on the default Gdk::Display.) This could be used for communicating between different applications, though the amount of data is limited to 20 bytes.
    * winid: the window to send the X ClientMessage event to. 
    * display: the Gdk::Display for the window where the message is to be sent. ((* Since 2.2 *))
    * Returns: true if success, otherwise false.

--- send_clientmessage_toall
    Sends an X ClientMessage event to all toplevel windows on the default Gdk::Screen. 
    Toplevel windows are determined by checking for the WM_STATE property, as described in the Inter-Client Communication Conventions Manual (ICCCM). If no windows are found with the WM_STATE property set, the message is sent to all children of the root window.
    * Returns: self



-((<Masao>))
