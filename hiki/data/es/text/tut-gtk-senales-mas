= Más sobre manejadores de eventos
{{link "tut-gtk-holamundo-detalles", nil, "tut-gtk", "tut-gtk-holamundo2"}}

Echemos otro vistazo a GLib::Instantiatable#signal_connect:

  % irb --simple-prompt
  >> require 'gtk2'
  => true
  >> b = Gtk::Button.new("hoge")
  => #<Gtk::Button:0x40a2a858 ptr=0x8237df8>
  >> b.signal_connect("clicked") { puts 1 }
  => 1
  >> b.signal_connect("clicked") { puts 2 }
  => 2
  >>

Te has fijado en el valor int devuelto?  

Es una etiqueta que identifica el bloque de respuesta. Como se muestra arriba, se pueden tener tantas respuestas por señal como se necesiten, y cada una se ellas será ejecutada en el orden en que fueron definidas.

Ahora vamos a emitir manualmente una señal. El método GLib::Instantiatable#emit_signal emitirá la señal que se especifica como argumento.

Aquí se puede observar  que los bloques se ejecutan en el ordne el que fueron definidos:

  >> b.signal_emit("clicked")
  1 
  2
  => nil
  >>

GLib::Instantiatable#signal_handler_disconnect se usa para eliminar un manejador de señales previamente asignado, identificado por la etiqueta devuelta por GLib::Instantiatable#signal_connect:

  >> b.signal_handler_disconnect 1
  => #<Gtk::Button:0x40a2a858 ptr=0x8237df8>
  >> b.signal_emit("clicked")
  2
  => nil
  >>

También se puede desactivar temporalmente un bloque de código de respuesta con GLib::Instantiatable#signal_handler_block y GLib::Instantiatable#signal_handler_unblock:

  >> b.signal_handler_block 2
  => #<Gtk::Button:0x40a2a858 ptr=0x8237df8>
  >> b.signal_emit("clicked")
  => nil
  >> b.signal_handler_unblock 2
  => #<Gtk::Button:0x40a2a858 ptr=0x8237df8>
  >> b.signal_emit("clicked")
  2
  => nil
  >>
