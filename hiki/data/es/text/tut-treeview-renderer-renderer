= Cell Renderers
{{link "tut-treeview-renderer", "tut-treeview-renderer", "tut-treeview", "tut-treeview-renderer-attributes"}}

Existen diferentes CellRenderer para diferentes propósitos:

* Gtk::CellRendererText muestra strings, nÃºmeros o booleanos en forma de cadena de texto ("Pepe", "99.02", "true")
* Gtk::CellRendererPixbuf se usa para mostrar imÃ¡genes; tanto definidas por el usuario, como cualquiera de los iconos de stock incluidos.
* Gtk::CellRendererToggle muestra un valor booleano en forma de checkbox o radiobutton.
*Gtk::CellEditable es un tipo especial que implementa celdas editables (p.e. Gtk::Entry o Gtk::SpinButton en un TreeView)

Al contrario de lo que pueda parecer, un CellRenderer no dibuja una sola celda, de hecho es el responsable de dibujar una columna completa (o parcial) de un TreeView. Básicamente comienza en la primera fila y dibuja la columna que le corresponde. Después, pasa a la siguiente fila y dibuja de nuevo la columna asignada. Así sucesivamente.

¿Cómo sabe un CellRenderer qué debe dibujar? Cada objeto CellRenderer tiene ciertas 'propiedades' convenientemente documentadas en el API (como la mayoría de objetos y widgets). Estas propiedades determinan que va a dibujar el CellRenderer y como va a hacerlo. En el momento en que se llama al CellRenderer para que dibuje una celda en concreto, este comprueba sus propiedades y dibuja la celda de acuerdo con ellas. Esto implica que cuando se cambia una propiedad de un CellRenderer, esta propiedad afecta a todas las filas dibujadas tras el cambio, hasta que se cambia de nuevo dicha propiedad.

Aquí temenos un sencillo y completamente inútil ejemplo que demuestra este comportamiento, también introduce algunas de la propiedades más usadas de Gtk::CellRendererText:



  require 'gtk2'

  treestore = Gtk::TreeStore.new(String, String)
                                                                                                                               
  # Agrega una fila de primer nivel y la deja vacía 
  parent = treestore.append(nil)
                                                                                                                               
  # Agrega una fila hija a la fila superior y la rellena con algunos datos 
  iter = treestore.append(parent)
  iter[0] = "Joe"
  iter[1] = "Average"
                                                                                                                               
  # Agrega una segunda fila a la superior y le agrega algunos datos 
  iter = treestore.append(parent)
  iter[0] = "Jane"
  iter[1] = "Common"
                                                                                                                               
  view = Gtk::TreeView.new(treestore)
  view.selection.mode = Gtk::SELECTION_NONE                                                                                                                               
                                                                                                                               
  # Crea un CellRenderer y asigna la propiedad 'text'
  renderer = Gtk::CellRendererText.new
  renderer.text = "Boooo!"
                                                                                                                               
  # Agrega la columna usando el CellRenderer 
  col = Gtk::TreeViewColumn.new("First Name", renderer)
  view.append_column(col)
                                                                                                                                                                                                                                                               
  # Crea otro CellRenderer y le asignamos la propiedad 'background'
  renderer = Gtk::CellRendererText.new
  renderer.background = "orange"
                                                                                                                               
  # Agrega otra columna usando el segundo CellRenderer
  col = Gtk::TreeViewColumn.new("Last Name", renderer)
  view.append_column(col)
  
  window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
  window.signal_connect("delete_event") { Gtk.main_quit; exit! }
  window.add(view)
  window.show_all
                                                                                                                               
  Gtk.main

{{image_right "renderer.png"}}

Parece que lo que el TreeView muestra es parcialmente correcto pero también parcialmente incompleto. Los CellRenderer no muestran ninguno de los datos almacenados en el TreeStore. Esto se debe a que no hemos realizado ninguna conexión entre lo que los CellRenderer tienen que dibujar y los datos del modelo. Nos hemos limitado a asignar algunas propiedades de los CellRender al inicio, y estos siguen estas propiedades meticulosamente. 


