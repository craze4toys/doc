= Eventos
{{link "tut-gtk-senales", "gtk-primeros-pasos", "tut-gtk", "tut-gtk-holamundo-detalles"}}

A parte de el sistema de señales, los eventos del servidor X Window se reflejan también en GTK.

Aquí tiene la lista completa de eventos:

* event
* button_press_event
* button_release_event
* scroll_event
* motion_notify_event
* delete_event
* destroy_event
* expose_event
* key_press_event
* key_release_event
* enter_notify_event
* leave_notify_event
* configure_event
* focus_in_event
* focus_out_event
* map_event
* unmap_event
* property_notify_event
* selection_clear_event
* selection_request_event
* selection_notify_event
* proximity_in_event
* proximity_out_event
* visibility_notify_event
* client_event
* no_expose_event
* window_state_event

Se puede asignar código a un evento específico X11 de la misma forma que con las señales GTK. Tan solo hay que usar el "nombre de evento" en lugar de "nombre de señal" como se vio en el capítulo anterior:

  GLib::Instantiatable#signal_connect("nomre de evento") do
      # Código a ejecutar al capturar "nombre de evento".
  end

El código de respuesta (callback) puede aceptar dos parámetros:

  GLib::Instantiatable#signal_connect("nombre de evento") do |w, e|
      # ...
  end

(en este caso, w se refiere al componente, y e al evento).

Dependiendo del valor de retorno del bloque de código, GTK decidirá si el evento debe ser esparcido o no:

* Si es verdadero, GTK detendrá aquí el procesamiento de eventos;
* Si es falso, GTK continuará propagando el evento

También las selecciones GDK y el drag-and-drop aportan algunos eventos, pero estos se reflejan en las señales GTK:

* selection_received
* selection_get
* drag_begin_event
* drag_end_event
* drag_data_delete
* drag_motion
* drag_drop
* drag_data_get
* drag_data_received


