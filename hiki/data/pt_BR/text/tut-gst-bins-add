= Adicionando Elementos a um "Bin"
{{link("tut-gst-bins-create", nil, "tut-gst", "tut-gst-bins-custom")}}

Elementos são adicionados com o exemplo de código a seguir:

  element = Gst::ElementFactory.make("mpg123", "decoder")

  bin = Gst::Bin.new
  bin.add(element) 
 
"Bins" e threads podem ser adicionados a outros "bins" também. Isso permite você criar "nested bins". "Pipelines" não devem ser adicionados a nenhum outro elemento, apesar. Eles são "bins" de nível superior e eles estão ligados diretamente ao "scheduler".

Para conseguir um elemento do "bin" você pode usar: 

  element = bin.get_by_name("decoder")

Um atalho de conveniência para Gst::Bin#get_by_name é Gst::Bin#[]:

  element = bin["decoder"]

Você pode ver que o nome do elemento se torna bem útil para recuperar o elemento de um "bin" usando o nome do elemento. O Gst::Bin#get_by_name irá procurar recursivamente os "nested bins".

Para pegar uma lista de elementos em um "bin", use Gst::Bin#elements ou sua opção iterativa Gst::Bin#each_element: 

  bin.each_element do |element|
    puts "elemento no 'bin': " + element.name
  end

Para remover um elemento de um "bin" use:

  bin.remove(element)

Para adicionar muitos elementos a um "bin" de uma vez, apenas use Gst::Bin#add com quantos parâmetros você quiser:

  bin.add(element1, element2, element3)