= Recuperando Dados de Linha
{{link "tut-treeview-model-manipulate", "tut-treeview-model", "tut-treeview", "tut-treeview-model-remove"}}

Armazenar dados não é muito útil se eles não puderem ser recuperados novamente. Isso é feito usando Gtk::TreeIter#[], o qual recupera o valor na dada coluna da linha para a qual o "iter" aponta.

Eis o exemplo anterior extendido para navegar o armazenador de lista e imprimir os dados armazenados. Como um extra, a gente usa o  Gtk::TreeModel#each para navegar o armazenador e recuperar o número da linha do the Gtk::TreePath passado para a gente no bloco de código:

  # Cria um armazenador para o primeiro nome, último nome e ano de nascimento
  liststore = Gtk::ListStore.new(String, String, Integer)

  # Adiciona uma linha vazia e a preenche com alguns dados
  iter = liststore.append

  iter[0] = "José"
  iter[1] = "Silva"
  iter[2] = 1970

  # Adiciona outra linha e preenche com alguns dados
  iter = liststore.append

  iter[0] = "Ana"
  iter[1] = "Maria"
  iter[2] = 1967

  liststore.each do |model,path,iter|
    printf("Linha %s: %s %s, nascido(a) em %i\n", path.to_str, iter[0], iter[1], iter[2]);
  end

Uma coisa que vale a pena mencionar: significa que a gente precisa liberá-lo uma vez que a gente não precisa mais dele; o segundo é que todos os campos de uma linha são configurados para um valor padrão nil aproprieado para o tipo de dado em questão. Um campo de um tipo integer conterá o valor 0 até que ele configurado para um novo valor, e as strings e todos os tipos de ponteiros serão nil até que sejam configurados para outra coisa. Execute o programa acima com uma linha vazia adicional e olhe a saída para ver isto em efeito.