= Detalhes das Caixas
{{link "tut-gtk2-packing-theory", "tut-gtk2-packing-intro", "tut-gtk", "tut-gtk2-packing-demo"}}

Por causa dessa flexibilidade, posicionar caixas na GTK pode ser confuso num primeiro momento. Existem muitas opções, e não é imediatamente óbvio como isso tudo junto funciona. No fim, entretanto, existem basicamente 5 estilos diferentes.

{{image_left("en:packbox1.png")}}{{br}}

Cada linha contém uma caixa horizontal (hbox) com vários botões. A chamada de Gtk::Box#pack é um atalho para a chamada para posicionar cada um dos botões dentro do hbox. Cada um dos botões é posicionado dentro do hbox da mesma maneira (isto é, mesmos argumentos para o método Gtk::Box#pack_start).

O método Gtk::Box#pack_start parece com isto:

  Gtk::Box#pack_start(filho, expandir, preencher, espaço_externo) 

O primeiro argumento é o objeto que você está posicionando na caixa. Os objetos serão todos botões por enquanto, assim nós ficaremos posicionando botões dentro das caixas.

O argumento "expandir" para Gtk::Box#pack_start e Gtk::Box#pack_end controla se os componentes são deitados na caixa:

:Se expandir for verdadeito ("true")
 Os componentes preencherão todo o espaço extra na caixa, assim a caixa é automaticamente expandida para preencher a área alocada para ela;

:Se expandir for falso ("false")
 A caixa é encolhida para que caiba o componente no seu tamanho.

Configurar "expandir" para falso lhe permitirá fazer justificação a direita ou esquerda dos seus componentes. De outro jeito, eles serão todos expandidos para caber na caixa, e o mesmo efeito poderia ser alcançado usando apenas um dos métodos Gtk::Box#pack_start ou Gtk::Box#pack_end.
 
O argumento "preencher" controla onde o espaço dado para o objeto pela opção "expandir" é alocado:

:Se "preencher" for verdadeiro
 os objeto é extendido para caber no espaço alocado;
:Se "preencher" for falso
 o objeto é deixado em seu tamanho original, e espaço_externo ("padding") é adicionado ao seu redor.

Note que o argumento "preencher" tem apenas um efeito se o argumento "expandir" for verdadeiro.

Quando uma nova caixa horizontal é criada, ela se parece com isto:

  Gtk::HBox.new(homogêneo, espaçamento) 

O argumento homogêneo para Gtk::HBox.new (e o mesmo para Gtk::VBox.new) controla se cada objeto na caixa tem o mesmo tamanho (isto é, a mesma largura em um hbox, ou a mesma altura em um vbox). Se configurado para verdadeiro, os métodos Gtk::Box#pack_start ou Gtk::Box#pack_end trabalharão essencialmente como se o argumento "expandir" estivesse sempre configurado para verdadeiro.

Qual a diferença entre espaçamento (configurado quando a caixa é criada) e espaço_externo ("padding" - configurado quando os elementos são posicionados) ?
Espaçamento é adicionado entre os objetos, e espaço_externo é adicionado em qualquer lado de um objeto. O "screenshot" a seguir deve deixar mais claro:

{{image_left("en:packbox2.png")}}{{br}}

A seguir está o código para criar os screenshots acima. Ele está bastante comentados, assim espero que você não vá ter problemas ao seguí-lo. Apenas brinque com ele.