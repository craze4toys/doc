= class Gtk::ComboBox
A widget used to choose from a list of items.

== Object Hierarchy
* Object
  * GLib::Instantiatable
    * GLib::Object
      * Gtk::Object
        * Gtk::Widget
          * Gtk::Container
            * Gtk::Bin
              * Gtk::ComboBox

== Included Modules
* Gtk::CellLayout

== Class Methods
--- Gtk::ComboBox.new(is_text_only = true)
    Creates a new Gtk::ComboBox. If is_text_only is true, you should only manipulate its data source with the following convenience methods: Gtk::ComboBox#append_text, Gtk::ComboBox#insert_text, Gtk::ComboBOx#prepend_text and Gtk::ComboBox#remove_text. ((* Since 2.4 *))
    * is_text_only: true if just displaying strings, otherwise false.
    * Returns: A new Gtk::ComboBox.  

--- Gtk::ComboBox.new(model)
    Creates a new Gtk::ComboBox with the model initialized to model.  ((* Since 2.4 *))
    * model: A Gtk::TreeModel.  
    * Returns: A new Gtk::ComboBox.  

== Instance Methods
--- wrap_width
    Returns the wrap width which is used to determine the number of columns for the popup menu. If the wrap width is larger than 1, the combo box is in table mode. ((* Since 2.4 *))
    * Returns: the wrap width
--- wrap_width=(wrap_width)
    Sets the wrap width for layouting the items in a grid. The wrap width is basically the preferred number of columns when you want to the popup to be layed out in a table. ((* Since 2.4 *))
    * wrap_width: the wrap width(Integer)
    * Returns: wrap_width
--- set_wrap_width(wrap_width)
    Same as Gtk::ComboBox#wrap_width=. ((* Since 2.4 *))
    * wrap_width: the wrap width(Integer)
    * Returns: self

--- row_span_column
    Returns the column with row span information.  ((* Since 2.4 *))
    * Returns: The row span column.  
--- row_span_column=(row_span)
    Sets the column with row span information. The row span column contains integers which indicate how many rows an item should span. ((* Since 2.4 *))
    * row_span: A column in the model passed during construction. (Integer)
    * Returns: row_span
--- set_row_span_column(row_span)
    Same as Gtk::ComboBox#row_span_column=. ((* Since 2.4 *))
    * row_span: A column in the model passed during construction. (Integer)
    * Returns: self

--- column_span_column
    Returns the column with column span information. ((* Since 2.4 *))
    * Returns: the column span column.  
--- column_span_column=(column_span)
    Sets the column with column span informationn. The column span column contains integers which indicate how many columns an item should span. ((* Since 2.4 *))
    * column_span: A column in the model passed during construction. 
    * Returns: column_span
--- set_column_span_column(column_span)
    Same as Gtk::ComboBox#column_span_column=.  ((* Since 2.4 *))
    * column_span: A column in the model passed during construction. 
    * Returns: self

--- active
    Returns the index of the currently active item, or -1 if there's no active item. If the model is a non-flat treemodel, and the active item is not an immediate child of the root of the tree, this method returns Gtk::TreePath#indices[0], where path is the Gtk::TreePath of the active item.  ((* Since 2.4 *))
    * Returns: An integer which is the index of the currently active item, or -1 if there's no active item. 
--- active=(index)
    Sets the active item  at index.
    * index: The item which is currently active
    * Returns: index
--- set_active(index)
    Same as Gtk::ComboBox#active=.
    * index: The item which is currently active
    * Returns: self

--- active_iter
    Returns  the current active item. ((* Since 2.4 *))
    * Returns: the current active item(Gtk::TreeIter)
--- active_iter=(iter)
    Sets the current active item to be the one referenced by iter. iter must correspond to a path of depth one. ((* Since 2.4 *))
    * iter: A Gtk::TreeIter
    * Returns: iter
--- set_active_iter(iter)
    Same as Gtk::ComboBox#active_iter=.  ((* Since 2.4 *))
    * iter: A Gtk::TreeIter
    * Returns: self

--- model
    Returns the Gtk::TreeModel which is acting as data source. ((* Since 2.4 *))
    * Returns: The Gtk::TreeModel for the combo box
--- model=(model)
    Sets the model. Will unset a previously set model (if applicable). If model is nil, then it will unset the model.  ((* Since 2.4 *))
    * model: A Gtk::TreeModel
    * Returns: model
--- set_model(model)
    Same as Gtk::ComboBox#model=. ((* Since 2.4 *))
    * model: A Gtk::TreeModel
    * Returns: self


--- append_text(text)
    Appends String to the list of strings stored in combo_box. Note that you can only use this method with combo boxes constructed with Gtk::ComboBox.new or Gtk::ComboBox.new(true). ((* Since 2.4 *))
    * text: a String
    * Returns: self

--- insert_text(position, text)
    Inserts String at position in the list of strings stored in combo_box. Note that you can only use this method with combo boxes constructed with Gtk::ComboBox.new or Gtk::ComboBox.new(true). ((* Since 2.4 *))
    * position: An index to insert text. 
    * text: a String
    * Returns: self

--- prepend_text(text)
    Prepends string to the list of strings stored in combo_box. Note that you can only use this method with combo boxes constructed with Gtk::ComboBox.new or Gtk::ComboBox.new(true). ((* Since 2.4 *))
    * text: a String
    * Returns: self

--- remove_text(position)
    Removes the string at position from combo_box.  Note that you can only use this method with combo boxes constructed with Gtk::ComboBox.new or Gtk::ComboBox.new(true). ((* Since 2.4 *))
    * position: Index of the item to remove. 
    * Returns: self

--- popup
    Pops up the menu or dropdown list of combo_box. 
    This method is mostly intended for use by accessibility technologies; applications should have little use for it. ((* Since 2.4 *))
    * Returns: self

--- popdown
    Hides the menu or dropdown list of combo_box. 
    This method is mostly intended for use by accessibility technologies; applications should have little use for it. ((* Since 2.4 *))
    * Returns: self

== Properties
--- active: Integer (Read/Write)
    The item which is currently active. If the model is a non-flat treemodel, and the active item is not an immediate child of the root of the tree, this property has the value Gtk::TreePath#indices[0], where path is the Gtk::TreePath of the active item. ((* Since 2.4 *))
    * Allowed values: >= -1
    * Default value: -1

--- column-span-column: Integer (Read/Write)
    If this is set to a non-negative value, it must be the index of a column of type Integer in the model. 
    The values of that column are used to determine how many columns a value in the list will span. ((* Since 2.4 *))
    * Allowed values: >= -1
    * Default value: -1

--- model: Gtk::TreeModel (Read/Write)
    The model from which the combo box takes the values shown in the list. ((* Since 2.4 *))

--- row-span-column: Integer (Read/Write)
    If this is set to a non-negative value, it must be the index of a column of type Integer in the model. 
    The values of that column are used to determine how many rows a value in the list will span. Therefore, the values in the model column pointed to by this property must be greater than zero and not larger than wrap-width. ((* Since 2.4 *))
    * Allowed values: >= -1
    * Default value: -1

--- wrap-width: Integer (Read/Write)
    If wrap-width is set to a positive value, the list will be displayed in multiple columns, the number of columns is determined by wrap-width. ((* Since 2.4 *))
    * Allowed values: >= 0
    * Default value: 0

== Style Properties
--- appears-as-list: true or false (Read)
    Whether dropdowns should look like lists rather than menus. ((* Since 2.4 *))
    * Default value: false

== Signals
--- changed: self
    The changed signal gets emitted when the active item is changed. The can be due to the user selecting a different item from the list, or due to a call to Gtk::ComboBox#active_iter=. ((* Since 2.4 *))
     * self: the Gtk::ComboBox


- ((<Masao>))
