= Hola mundo
{{link("tut-gst-elements-state", nil, "tut-gst", "tut-gst-helloworld-conclusion")}}

Para empezar crearemos una aplicaión sencilla, un reproductor mp3 completo, usando componentes estándar GStreamer. El reproductor leerá de un archivo que será proporcionado como primer argumento al programa.

== El código

  require 'gst'

  Gst.init
  unless ARGV.length == 1
    $stderr.puts "Usage: #{__FILE__} <mp3 filename>"
    exit 1
  end

  # crea una nueva tubería para almacenar los elementos
  pipeline = Gst::Pipeline.new

  # crea un lector de disco
  filesrc = Gst::ElementFactory.make("filesrc")
  filesrc.location = ARGV.first

  # es el momento de crear el decodificador
  decoder = Gst::ElementFactory.make("mad")

  # una salida de audio
  audiosink = Gst::ElementFactory.make("osssink")

  # se añaden los objetos a la tubería principal
  pipeline.add(filesrc, decoder, audiosink)

  # se conectan los elementos
  filesrc >> decoder >> audiosink

  # comienza la reproducción
  pipeline.play

  while pipeline.iterate do end

  # se detiene la tubería
  pipeline.stop

== Explicación del código

Veamos el ejemplo paso a paso.

Lo primero que hay que hacer es incluir la librería Ruby/GStreamer e inicializar en entorno.

  require 'gst'
  Gst.init
  ...

Vamos a crear una tubería vacia. Como se ha visto en la introducción, esta tubería va a almacenar y gestionar todos los elementos que vamos a incluir en ella.

  ...
  # Crea una nueva tubería para almacenar los elementos
  pipeline = Gst::Pipeline.new
  ...

Usaremos el constructor estándar para una tubería: Gst::Pipeline.new.

Ahora creamos el elemento de fuente de disco. Este elemento es capaz de leer desde un archivo. Usaremos el mecanismo de propiedades de GLib:Object para fijar una propiedad del elemento: el archivo desde el que se va a leer.

  ...
  # crea un lector de disco
  filesrc = Gst::ElementFactory.make("filesrc")
  filesrc.location = ARGV.first
  ...
  
((*Nota*)) Se puede comprobar si filesrc.nil? para verificar la creación de el elemento de fuente de disco.

A continuación se crea el elemento decodificador de mp3. Asumimos que el plugin 'mad' está instaladao en el sistema donde se ejecuta la aplicación.

  ...
  # es el momento de crear el decodificador
  decoder = Gst::ElementFactory.make("mad")
  ...

Gst::ElementFactory.make puede tomar dos argumentos: un string que identifica el elemento que necesitas y un segundo elemento: como quieres llamar al elemento. Puedes poner cualquier nombre de tu elección y puede ser usado para identificar el elemento en un contenedor/tubería. Aquí hemos escogido no indicar un nombre para el elemento, esto significa que GStreamer generará automáticamente un nombre por nosotros.

Finalmente crearemos nuestro elemento de salida de audio. Este elemento nos permitirá reproducir el sonido usando OSS.

  ...
  # una salida de audio
  audiosink = Gst::ElementFactory.make("osssink")
  ...

Se añaden los elementos a la tubería.

  ...
  # se añaden los objetos a la tubería principal
  pipeline.add(filesrc, decoder, audiosink)
  ...

Los puertos de los diferentes elementos son conectados entre si:

  ...
  # se conectan los elementos
  filesrc >> decoder >> audiosink
  ...

Ahora que hemos creado la tubería. Podemos visualizarla de esta forma:

{{image_left("hello-world.png")}}
{{br}}

Todo está listo para comenzar la reproducción. Usaremos las siguientes instrucciones para cambiar el estado de la tubería:

  ...
  # comienza la reproducción
  pipeline.play
  ...

((*Nota*)) GStreamer se ocupará de los estados READY y PAUSE al pasar de NULL a PLAYING.

Ya que no usamos threads, aún no ocurre nada. Tenemos que llamar a Gst::Bin#iterate para ejecutar un bucle de la tubería.
  ...
  while pipeline.iterate do end
  ...

El método Gst::Bin#iterate devolverá true mientras haya algo interesante ocurriendo dentro de la tubería. Cuando se alcanza el fin del archivo el método Gst::Bin#iterate devolverá false y se terminará el bucle.

  ...
  # se detiene la tubería
  pipeline.stop

((*Nota*)) No hay que olvidar detener la tubería después de usarla. Esto liberará todos los recursos ocupados por los elementos.

== Ejecutando Hola mundo

Sñimplemente guarde el código en un archivo llamado (({helloworld.rb})) y ejecute:

  ruby helloworld.rb miarchivo.mp3
