= Conectando elementos
{{link("tut-gst-pads-caps", nil, "tut-gst", "tut-gst-bins-create")}}

Se pueden conectar entre si los puertos de diferentes elementos de forma que formen una cadena.

{{image_left("linked-elements.png")}}
{{br}}

Uniendo estos tres elementos, hemos creado una cadena mi¡uy simple. El efecto de esto será que la salida del elemento fuente (elemento 1) será usada como entrada por el elemento de filtro (elemento 2). El elemento de filtro hará algo con los datos y enviará el resultado al elemento final se salida (elemento 3).

Imagine el gráfico de arriba como un simple decodificador de audio MPEG. El elemento fuente es una fuente de disco, el elemento de filtro es el decodificador MPEG y la salida es la tarjeta de sonido. Usaremos estr simple gráfico para construir un reproductor de MPEG más adelante.

== Realizando conexiones sencillas

Se puede conectar dor puertos con:

  srcpad = element1.get_pad("src")
  sinpad = element2.get_pad("sink")

  # los conecta
  srcpad.link(sinkpad)

  ....

  # y los desconecta
  srcpad.unlink(sinkpad)

Un atajo para elementos de una sola salida y de una sola entrada es el método Gst::Element#link:

  # los conecta
  element1.link(element2)
   
  ...

  # y los desconecta
  element1.unlink(element2)

E incluso mejor es el operador  Gst::Element#>>, que no es más que un alias para Gst::Element#link:

  # los conecta todos
  element1 >> element2 >> element3

Puedes consultar si un puerto está conectado con Gst::Pad#linked?.

== Creando conexiones filtradas

También se puede un tipo específico de medio usando Gst::Pad#link_filtered y Gst::Element#link_filtered con capacidades.
