= Theoretisches über Signale und Callbacks
{{link "tut-gtk-helloworld", "tut-gtk-intro", "tut-gtk", "tut-gtk-events"}}

Bevor wir uns das "Hello World"-Programm genauer ansehen, sehen wir uns an, wie GTK mit Signalen und Callbacks umgeht.

Auf die gleiche Weise, wie das System ein Signal beim Herunterfahren Signale an laufende Prozesse sendet ((-beachten Sie, dass GTK-Signale nicht mit den Unix-Signalen in direkter Verbindung stehen. Das GTK-Toolkit wurde unabhängig von dem darunterliegenden System konzipiert. -)), sendet GTK ein Signal an die Main-Schleife (Gtk.main), wenn ein besonderes Ereignis ausgelöst wird. Die Main-Schleife wird daher die zugehörige Methode des Widgets als Callback aufrufen.

Bis ein Signal empfangen wird, wird die Main-Schleife nichts tun.

Um einem GTK-Widget mitzuteilen, dass es ein bestimmtes Signal abfangen und den zugehörigen Code ausführen soll, müssen wir einen Signal-Handler erstellen.

Das kann mit der Methode GLib::Instantiatable#signal_connect erledigt werden, die ein Teil der Ruby/GLib-Bibliothek ist. (Erinnern Sie sich, dass GTK auf GLib aufbaut).

  GLib::Instantiatable#signal_connect("signal name") do
      # Code, der ausgeführt werden soll, wenn "signal name" empfangen wird
  end

GLib::Instantiatable#signal_connect benötigt zwei Dinge:
* den Namen des Signals, das abgefangen werden soll und
* einen Block mit Code, der bei Empfangen des Signals ausgeführt werden soll.

Der Block kann optionale Parameter entgegennehmen, wie im folgenden Abschnitt gezeigt wird:

  GLib::Instantiatable#signal_connect("signal name") do |w|
      # ...
  end

Das Widget, welches das Signal gesendet hat wird in dem Parameter w zur Verfügung gestellt.
