= ((<Gtk::TreeModels|Gtk::TreeModel>)) zum Speichern von Daten: Gtk::ListStore und Gtk::TreeStore
{{link "tut-treeview-components", nil, "tut-treeview", "tut-treeview-model-data"}}

Es ist wichtig zu verstehen, was ein Gtk::TreeModel ist und was es nicht ist. Ein Gtk::TreeModel ist im Grunde eine "Schnittstelle" zu dem Datenspeicher, das bedeutet, dass es eine standardisierte Sammlung von Methoden ist, die es einem Gtk::TreeView (und dem Programmierer) erlauben, bestimmte Charakteristika des Datenspeichers abzufragen, beispielsweise die Anzahl der Zeilen, Informationen darüber, welche Zeilen Subelemente haben und wieviele Subelemente eine bestimmte Zeile hat. Außerdem bietet es Methoden zum ermitteln von Daten aus dem Datenspeicher und um dem TreeView mitzuteilen, welche Datentypen in dem Model gespeichert sind. Jeder Datenspeicher muss das Gtk::TreeModel-Interface implementieren und diese Methoden zur Verfügung stellen. Gtk::TreeModel selbst bietet nur einen Weg zum Abfragen der Eigenschaften des Datenspeichers und zum Ermitteln von existenten Daten, es stellt keine Möglichkeiten bereit, um Daten aus dem Speicher zu entfernen oder hinzuzufügen. Dies kann über die Verwendung von für den Datenspeicher zugeschnittenen Methoden getan werden.

Gtk+ bietet von sich aus zwei eingebaute Datenspeicher (Models) an: Gtk::ListStore und Gtk::TreeStore. Wie die Namen schon sagen, dient ein Gtk::ListStore für einfache Listen, in denen die Datenelemente keine hierarchische Eltern-Kind-Beziehungen besitzen, das Gtk::TreeStore wird für baumartige Datenstrukturen, in denen die Elemente Eltern-Kind-Beziehungen haben können. Eine Liste von Dateien in einem Verzeichnis wäre ein Beispiel für eine einfache Listenstruktur, während ein Verzeichnisbaum ein Beispiel für eine Baumstruktur wäre. Eine Liste ist im Grunde nur eine bestimmte Art von Baumansichten, in denen die Elemente keine Kind-Elemente zugeordnet bekommen können. Daher könnte man genauso einen TreeStore verwenden, um die Daten für eine einfache Liste zu pflegen. Der einzige Grund, aus dem Gtk::ListStore existiert ist um eine einfachere Schnittstelle anzubieten, die keine Eltern-Kind-Beziehungen anbietet, und weil ein einfaches Listenmodell optimiert werden kann, wenn keine Kindelemente existieren. Dadurch wird die Anwendung schneller und effizienter.

Die TreeModel-Implementierungen die Gtk::ListStore und Gtk::TreeStore achten auf die View-Seite, wenn Sie einmal das Gtk::TreeView eingerichtet haben, um anzuzeigen, was Sie brauchen. Wenn Sie die Daten in dem Store ändern, wird das Model die TreeView-Instanz darüber informieren und die angezeigten Daten werden upgedatet. Wenn Sie Zeilen einfügen oder entfernen, wird das Model ebenfalls den Store darüber informieren und Ihre Zeile wird in der Ansicht erscheinen oder verschwinden.
